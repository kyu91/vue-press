<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://www.levih.me/vue-press/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://www.levih.me/vue-press/rss.xml" rel="self" type="application/rss+xml"/>
    <title>It&amp;apos;s Blog</title>
    <link>https://www.levih.me/vue-press/</link>
    <description>VuePress를 활용한 기술 블로그로, SEO, 웹 개발, Python, 그리고 생산성 관련 유익한 글을 제공합니다.</description>
    <language>ko</language>
    <pubDate>Fri, 28 Feb 2025 14:57:45 GMT</pubDate>
    <lastBuildDate>Fri, 28 Feb 2025 14:57:45 GMT</lastBuildDate>
    <generator>@vuepress/plugin-feed</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>Books</category>
    <category>Tech Product</category>
    <category>Dev</category>
    <item>
      <title>마케팅 설계자-총정리</title>
      <link>https://www.levih.me/vue-press/books/%EB%A7%88%EC%BC%80%ED%8C%85%EC%84%A4%EA%B3%84%EC%9E%90/intro.html</link>
      <guid>https://www.levih.me/vue-press/books/%EB%A7%88%EC%BC%80%ED%8C%85%EC%84%A4%EA%B3%84%EC%9E%90/intro.html</guid>
      <source url="https://www.levih.me/vue-press/rss.xml">마케팅 설계자-총정리</source>
      <description>마케팅 시스템의 설계법과 퍼널에 대해 정리한 책</description>
      <category>Books</category>
      <pubDate>Mon, 04 Nov 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>마케팅 시스템의 설계법과 퍼널에 대해 정리한 책</li>
</ul>
<!-- more -->
<div class="hint-container important">
<p class="hint-container-title">중요</p>
<p>마케팅 설계자 - 러셀 브런슨 (Russell Brunson)지음</p>
</div>
<figure><figcaption>표지</figcaption></figure>
]]></content:encoded>
    </item>
    <item>
      <title>문제를 해결한다는 것에 대한 나의 고찰</title>
      <link>https://www.levih.me/vue-press/tech-product/pm/%EB%AC%B8%EC%A0%9C%EB%A5%BC-%ED%95%B4%EA%B2%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95.html</link>
      <guid>https://www.levih.me/vue-press/tech-product/pm/%EB%AC%B8%EC%A0%9C%EB%A5%BC-%ED%95%B4%EA%B2%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95.html</guid>
      <source url="https://www.levih.me/vue-press/rss.xml">문제를 해결한다는 것에 대한 나의 고찰</source>
      <description>&amp;apos;문제해결&amp;apos; 이라는 것에 대한 내 생각을 정리한다.</description>
      <category>Tech Product</category>
      <pubDate>Wed, 02 Oct 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>'문제해결' 이라는 것에 대한 내 생각을 정리한다.</li>
</ul>
<!-- more -->
<h2>문제 해결이란?</h2>
<p>인생을 살면서 많은 문제를 맞닥뜨린다.<br>
하지만 생각보다 많은 사람들은 문제를 해결하지 못하고 포기한다는 사람들이 있고, 어려워 하는 사람들도 있다.<br>
물론 나또한 어려운 문제들이 있고, 결국 해결하지 못하는 경우들이 많다.<br>
하지만 내가 이 글을 쓰는 이유는 많은 사람이 문제를 해결하겠다면서 진짜 문제가 뭔지도 모르고 쉬운 해결방법을 두고 어렵게 해결하려는 사람들이 있어 이 글을 쓴다.</p>
<h2>그래서 결국 너의 문제가 뭐라는 거야?</h2>
<p>22년도 퇴사 후 SW사관학교정글에서 공부를 하고 있을때, 하루에 해결해야 할 문제들이 10개는 넘었었다.<br>
왜 지금 코드에서 오류가 나는지, 왜 이렇게 시스템이 동작 하는지, 무슨 알고리즘을 요기에 써야 하는지 등등...</p>
<p>어느날 우리는 가상메모리 공부를 하면서 사람 3명이서 동일한 문제를 맞닥뜨리고 고민하고 있었다.<br>
그때 때마침 코치님께서 오셨고, 우린 차분하게 문제를 설명해 드리며 도움을 구했다.<br>
하지만 코치님은 우리의 질문에는 답하지 않으시고, 우리가 갖고 있는 문제들에 대해서 되묻기만 하셨다.</p>
<ul>
<li>왜 이것을 문제라고 생각했나?</li>
<li>그렇게 생각한 이유는 무엇인가?</li>
<li>그게 문제라고 생각 했다면 그 문제가 발생한 이유가 무엇인가?</li>
<li>그 문제가 발생한 이유가 어떤 것이라고 생각 하나?</li>
</ul>
<p>이런 대화를 하면서 우리는 계속해서 그 질문에 답하기 위해 생각해야 했다. 계단을 하나씩 하나씩 올라가면서 조금씩 멀리있는 건물을 보게 되는 것 같았다.</p>
<div class="hint-container important">
<p class="hint-container-title">중요</p>
<p>이렇게 대답을 해가면서 결국 그 문제의 해답은 우리의 입에서 나왔다.</p>
</div>
<p>정말로 우리는 문제를 알고 있었을까?</p>
<h2>있지도 않은 문제를 해결하려고 하는 문제</h2>
<p>가끔 지인들이나, 친구, 동생들에게 고민이 있다고 말하며 상담을 요청 하는 경우들이 있다.<br>
"정말 답이 없는 문제에요." "1주일은 생각해 봤는데, 해결 방법이 없어요" 하는 고민들을 들어보면, 90%는 정말 문제가 뭔지를 파악하지 못하는 경우들이다.<br>
진짜 문제는 다른곳에 있는데, 엉뚱한 곳에서 해결점을 찾으려고 하니 해결을 못하는 것이 당연한 것 아닌가?<br>
나는 SW사관학교정글에서의 경험으로 내린 생각은.</p>
<div class="hint-container important">
<p class="hint-container-title">중요</p>
<p>가장 중요하고 또한 어려운 것은 "진짜 문제를 찾고 그 원인을 찾는것 이라고 생각하며, 해결하는 방법은 너무나도 쉽다." 이다.</p>
</div>
<h2>그래서 문제가 무엇인지 어떻게 찾는데?</h2>
<p>내가 경험했던 SW사관학교정글에서의 경험을 다시 생각해보자<br>
코치님은 우리의 문제를 해결하는 가장 간단한 방법으로 "답을 바로 말해 주는것" 이였을 것이다.<br>
하지만 코치님은 그렇게 하지 않으시고, 우리가 스스로 답을 찾을 수 있도록 도와 주셨다. 질문을 하셨다.<br>
내가 주목하는 점은 이것이다. 나의 문제에서 궁금한 점이 나오지 않을 때까지 질문 하는 것이다.</p>
<ol>
<li>지금 내가 생각하는 문제에게 질문한다.</li>
<li>질문은 내가 더이상 질문을 할 수 없을 때까지 질문한다.</li>
<li>더이상 질문을 할 수 없다면, 각각의 질문들에 대한 해결방법을 다시 고민 한다.</li>
<li>운이 좋다면, 가장 마지막에 한 질문의 문제만 해결 되었을때, 모든 문제가 해결되는 마법을 경험한다.</li>
</ol>
<p>이것이 내가 생각하는 문제 찾고 해결에 가까워 지는 방법이다.</p>
<h2>그렇다면 문제를 해결할때 고려 할 것은?</h2>
<p>어떤 회사의 엘레베이터가 너무 느려서 직원들의 불만이 사장에게 까지 닿게 됐다.<br>
사장은 두 직원들에게 당장 이문제를 해결할 수 있는 방안을 들고 오라고 하였다.</p>
<p>A직원은 몇천만원을 들여 엘레베이터를 업그레이드 하여 속도를 높히는 작업을 하겠다고 하며, 엘레베이터 업체 리스트와 견적서, 업체 비교분석까지 완벽하게 해와서 사장에게 제출했다.</p>
<p>B직원의 사장에게 1줄짜리 보고서만 제출했다. 그 보고서에서 "엘레베이터 안밖으로 거울과 광고 게시판을 설치하면 됩니다." 였다.</p>
<p>이처럼 "엘레베이터가 느리다" 라는 문제를 해결하는 방법은 단순히 "엘레베이터의 속도를 높힌다"로 생각 하기 쉽지만, 사장은 당연히 B직원의 아이디어로 문제를 해결 할 것이다.<br>
문제를 해결 할 수 있는 방법은 수만가지다. 중요한건 명확한 페인포인트를 해결하면서 효율을 생각하는 것. 그것이 PM의 역할이다.</p>
<h2>결론</h2>
<p>직장에서나 인생에서나 우가 풀어야 하는 문제들은 절대 단순하지 않다. 하지만 숲이 불타고 있는데, 지금 내눈 앞에 나무 한그루의 불만을 끄기 위해서 노력한다면, 너무 바보같지 않은가?<br>
내가 위애 말한 나의 문제 해결 방법은 "숲을 보는 방법"이다. 아무리 복잡해 보이는 문제여도 하나하나 의문을 갖고 계단을 올라가다 보면, 결국은 원인을 발견 하고 해결 할 수 있다고 나는 감히 확신한다.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Python으로 고객 관리 시스템 만들기-MVP 설계편</title>
      <link>https://www.levih.me/vue-press/dev/Python-PyQt5-MVP.html</link>
      <guid>https://www.levih.me/vue-press/dev/Python-PyQt5-MVP.html</guid>
      <source url="https://www.levih.me/vue-press/rss.xml">Python으로 고객 관리 시스템 만들기-MVP 설계편</source>
      <description>아버님 사무실에 놀러갔다가 명령 받은 고객관리 시스템 구축 과정을 정리한다.</description>
      <category>Dev</category>
      <pubDate>Fri, 27 Sep 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>아버님 사무실에 놀러갔다가 명령 받은 고객관리 시스템 구축 과정을 정리한다.</li>
</ul>
<!-- more -->
<h2>왜 갑자기 Window App을 만드는가?</h2>
<p>나의 아버지는 맹인 지압원을 운영 하시고,<br>
이를 위해 오시는 환자분들의 예약, 처치 내역, 치료 결제 내역, 환자 정보 등을 관리 하셔야 한다.<br>
연세가 벌써 60 중반대이시다 보니 이런 데이터들을 관리하는데 어려움이 있다고 하셨다.<br>
현재는 엑셀로 관리를 하고 있는데, 거의 5년 넘게 저장한 데이터들을 관리하다 보니 어려운 점이 한두개가 아니라고 하셨다.<br>
그래서 효자인 나는 이 문제를 해결해 보고자 하였다.<br>
<a href="https://www.levih.me/tech-product/saas/DDEVI%EB%A1%9C-%EC%96%B4%EB%A8%B8%EB%8B%88-%ED%9A%8C%EC%82%AC-%ED%99%88%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EC%96%B4-%EC%A3%BC%EA%B8%B0.html" target="_blank" rel="noopener noreferrer">DDEVI로 어머니 회사 홈페이지 만들어 주기 글</a> 참고하기</p>
<h2>데이터 관리 현황</h2>
<ul>
<li>달력 포맷으로 관리하는 엑셀 파일이 있고, 해당 파일에서 약 7년간의 예약 일정을 관리중</li>
<li>환자 데이터는 나이대(20~30대)별로 엑셀파일이 있고, 환자별로 시트가 있음</li>
<li>환자별 시트에는 환자 상세 데이터와 그 환자의 예약 내역, 결제 내역, 처치내역 등이 있음</li>
</ul>
<h2>Pain Point 분석</h2>
<ol>
<li>달력에 엑셀에 많은 데이터가 있다보니, 히스토리를 찾기 힘듬</li>
<li>환자 데이터를 나이대 별로 관리를 하다보니, 시간이 지났을때 나이대에서 벗어나는 문제</li>
<li>환자 데이터가 여러 파일로 나누어져 있다보니 환자 검색이 거의 불가능함</li>
<li>환자별로의 예약/처치 내용이 따로 관리 되다 보니 예약 정보와 연동 되지 않음</li>
<li>환자데이터의 명확한 데이터 필드가 정의되어 있지 않음</li>
</ol>
<h2>해결 방안 아이데이션</h2>
<p>우선 환자 데이터에 대한 Low Data를 하나로 통합 하여 관리하고,<br>
해당 DB에서 원하는 데이터를 보여주는 뷰페이지가 필요하다고 판단했다.<br>
그리고 예약 등록을 시스템화 하고, 이름+생년월일을 키로 하여 Low Data를 추가/수정 할 수 있도록 해야 한다.</p>
<h2>MVP 설계</h2>
<p>우선 주요 구조와 기능 구현의 MVP를 설계해보자</p>
<ol>
<li>MVP 아키텍쳐<br>
</li>
<li>MVP App Home 화면<br>
</li>
<li>MVP App 예약하기 화면<br>
</li>
<li>MVP App 예약 내역 보기 화면<br>
</li>
<li>MVP App 환자별 상세 정보<br>
</li>
</ol>
<h2>사용 언어 및 라이브러리</h2>
<ul>
<li>Python</li>
<li>PyQt5</li>
<li>sqlite3</li>
</ul>
<p>다음 포스트에서부터 상세 기능들에 대한 구현을 시작 하자</p>
]]></content:encoded>
    </item>
    <item>
      <title>VPN, VPC, VPS 정리</title>
      <link>https://www.levih.me/vue-press/dev/VPN-VPC-VPS-%EC%A0%95%EB%A6%AC.html</link>
      <guid>https://www.levih.me/vue-press/dev/VPN-VPC-VPS-%EC%A0%95%EB%A6%AC.html</guid>
      <source url="https://www.levih.me/vue-press/rss.xml">VPN, VPC, VPS 정리</source>
      <description>네트워크에 대한 기본 용어 정의</description>
      <category>Dev</category>
      <pubDate>Mon, 22 Jul 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>네트워크에 대한 기본 용어 정의</li>
</ul>
<!-- more -->
<h2>정의</h2>
<ol>
<li>VPN(Virtual Private Network)
<ul>
<li>번역하면 가상 사설 네트워크</li>
<li>보통 웹에선 SSL VPN을 통해 사용자가 VPN을 통해 먼저 접속 하게 하고 암호화를 거친뒤 서버로 접속 하게 하는 역할을 한다.</li>
</ul>
</li>
<li>VPC(Virtual Private Cloud)
<ul>
<li>번역하면 가상 사설 클라우드</li>
<li>AWS의 EC2(클라우드 컴퓨터)는 각각의 리전(Region)을 갖고 이러한 떨어져있는 EC2들을 묶어 연결해주는 것을 VPC라고 한다.</li>
</ul>
</li>
<li>VPS(Virtual Private Server)
<ul>
<li>번역하면 가상 사설 서버</li>
<li>VPC와 비슷하게 보이겠으나, 차이는 클라우드 컴퓨터가 아닌 실제 컴퓨터를 하나의 가상 서버로 연결하는 것을 말한다.</li>
</ul>
</li>
</ol>
<h2>용도 및 특징</h2>
<ol>
<li>VPN
<ul>
<li>서버를 접근하는 네트워크를 가상으로 설정하여 사용자를 실제 서버 네트워크가 아닌 다른 네트워크로 돌리기 위해 사용한다.</li>
<li>보안성이 없어 해당 네트워크 통신은 VPN 개설자가 보두 볼 수 있다.</li>
</ul>
</li>
<li>VPC
<ul>
<li>AWS에서 많이 사용되는 개념으로 여러개의 EC2를 하나의 클라우드로 묶기 위해 사용된다.</li>
</ul>
</li>
<li>VPS
<ul>
<li>AWS의 등장으로 요즘은 별로 사용하지 않는 개념이다.</li>
</ul>
</li>
</ol>
<h2>배운점</h2>
<p>VPC 와 VPS의 차이를 이해 하는데 어려웠다. 사실 지금 이해한 부분이 맞는지도 확실 하지 않다.</p>
<p>상세히 설명 해줄 수 있는 분이 있으면 좋겠다.</p>
]]></content:encoded>
    </item>
    <item>
      <title>DDEVI로 어머니 회사 홈페이지 만들어 주기</title>
      <link>https://www.levih.me/vue-press/tech-product/saas/DDEVI%EB%A1%9C-%EC%96%B4%EB%A8%B8%EB%8B%88-%ED%9A%8C%EC%82%AC-%ED%99%88%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EC%96%B4-%EC%A3%BC%EA%B8%B0.html</link>
      <guid>https://www.levih.me/vue-press/tech-product/saas/DDEVI%EB%A1%9C-%EC%96%B4%EB%A8%B8%EB%8B%88-%ED%9A%8C%EC%82%AC-%ED%99%88%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EC%96%B4-%EC%A3%BC%EA%B8%B0.html</guid>
      <source url="https://www.levih.me/vue-press/rss.xml">DDEVI로 어머니 회사 홈페이지 만들어 주기</source>
      <description>ddevi로 어머니 회사 홈페이지 만들어 주기로 했다. 난 효자다</description>
      <category>Tech Product</category>
      <pubDate>Wed, 24 Jan 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>ddevi로 어머니 회사 홈페이지 만들어 주기로 했다. 난 효자다</li>
</ul>
<!-- more -->
<h2>개요</h2>
<p>지금 어머니가 일하고 계신 해성그래픽이란 회사는 홈페이지도 없는 작은 회사지만, 영업이나 미팅에서 간단한 회사 소개와 회사에서 만들고 있는 아트웍들을 소개할 홈페이지가 필요했다.</p>
<p>만약 새로운 거래처에서 문의가 들어오면 홈페이지 주소 하나만 보내 주면 대응 할 수 있는 그림을 그리고 있다.</p>
<h2>DDEVI 란?</h2>
<p><a href="https://website.ddevi.com/" target="_blank" rel="noopener noreferrer">AI Website &amp; Landing pages in 10 seconds | Free 100 years hosting | No drag &amp; drop - just a click</a></p>
<p>Wix 같이 노코드로 홈페이지를 만들 수 있도록 도와 주는 플랫폼이다.</p>
<p>근데, 무료로 제공해 주는 서비스가 어마어마하다. 아래 정리한다.</p>
<figure><figcaption>Untitled</figcaption></figure>
<h2>특장점</h2>
<h3>무료 제공 범위</h3>
<p>위에서도 말했지만 무료로 하나의 홈페이지를 만드는 것에 크게 걸림돌이 없다.</p>
<div class="hint-container tip">
<p class="hint-container-title">팁</p>
<p>근데, 커스텀 도메인이 가능하다고 써있지만 서브도메인을 커스텀 할 수 있는 것이며, 나의 도메인을 사용 하기 위해선 $5를 내라고 한다. (일회성이라 이것도 혜자)</p>
</div>
<h3>AI 활용</h3>
<p>내가 만들려는 홈페이지가 어떤 홈페이지 인지 챗GPT에 명령하는 것처럼 아주 디테일하게 적는다. 그러면 자동으로 맞춤 레이아웃과 디자인을 추천하여 만들어 주는데, 이게 내 기준 아주 적절하고 괜찮다.</p>
<h2>제작 과정</h2>
<h3>홈페이지 접속 후 ‘Build a free website’ 버튼 클릭</h3>
<figure><figcaption>Untitled</figcaption></figure>
<h3>회사 이름을 쓰고 회사 설명을 아주 자세히 작성</h3>
<p>예를 들어 옷을 만드는 회사의 홈페이지라고 가정해보자.</p>
<ul>
<li>Business Name : 우리옷이뻐</li>
<li>Sell 소개 : 우리회사는 강남에 위치하는 우리옷이뻐 입니다. 우리회사는 여성의류를 직접 디자인하고 제작, 판매까지 하는 의류회사 입니다. 우리회사는 중국, 미국, 일본으로 수출 하고 있으며, 연 150억의 매출을 달성 하였습니다. 올해 4월에는 우리옷이뻐 패션쇼를 성공적으로 진행 했으며, 매년 50%씩 성장 하고 있습니다. 우리 온라인 쇼핑몰에서 물건을 구매하면 어디보다 저렴한 가격으로 구매 할 수 있습니다. 지금 바로 구매 해주세요.</li>
</ul>
<p>위와같이 진핸하면 30초 만에 홈페이지 하나가 만들어 진다.</p>
<h3>AI 디자인 사용 방법</h3>
<p>간단하다 세션별로 좌측 하단에 <code>AI Design</code> 을 눌러주면 AI가 서비스 설명에 맞게 디자인을 추천 한다.</p>
<figure><figcaption>Untitled</figcaption></figure>
<h3>디테일 수정 후 Publish</h3>
<p>우측 상단에 Publish를 눌러 서브 도메인을 내맘대로 짓고 발행 하면 된다.</p>
<h2>오마니 만들어준 홈페이지</h2>
<p>아직 콘텐츠는 더 넣어야 하지만 나름 만족한다. 무료여서 그런가.</p>
<p><a href="https://haesung.pages.dev/" target="_blank" rel="noopener noreferrer">해성 그래픽 - 의류 인쇄 및 필름 부착 서비스</a></p>
<h2>느낀점</h2>
<p>이제10분이면 홈페이지를 만드는 세상에 살고 있는데, 최근에 아는 분이 홈페이지 견적을 600만원으로 받아 왔다고 한다. 내 작은 목표는 많은 사람들이 이런 IT 기술들을 손쉽게 접근하고 재미있게 배웠으면 한다.</p>
]]></content:encoded>
    </item>
    <item>
      <title>MVP와 RAT에 대한 정리</title>
      <link>https://www.levih.me/vue-press/tech-product/pm/MVP%EC%99%80%20RAT%EC%97%90%20%EB%8C%80%ED%95%9C%20%EC%A0%95%EB%A6%AC.html</link>
      <guid>https://www.levih.me/vue-press/tech-product/pm/MVP%EC%99%80%20RAT%EC%97%90%20%EB%8C%80%ED%95%9C%20%EC%A0%95%EB%A6%AC.html</guid>
      <source url="https://www.levih.me/vue-press/rss.xml">MVP와 RAT에 대한 정리</source>
      <description>7가지 코드를 읽다가 배운 MVP와 RAT에 대해 정리해보자</description>
      <category>Tech Product</category>
      <pubDate>Sat, 03 Aug 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>7가지 코드를 읽다가 배운 MVP와 RAT에 대해 정리해보자</li>
</ul>
<!-- more -->
<h2>용어 정리</h2>
<ul>
<li>
<p><strong>MVP (Minimum Viable Product, 최소 기능 제품)</strong>: 제품의 핵심 가치를 시장에 빠르게 전달하기 위해 가장 중요한 기능으로만 구성된 제품의 기본 버전.</p>
</li>
<li>
<p><strong>RAT (Riskiest Assumption Test, 가장 위험한 가정 테스트)</strong>: 제품 개발 과정에서 가장 리스크가 큰 가정을 식별하고, 이를 테스트하여 실패 가능성을 줄이는 방법론.</p>
</li>
</ul>
<h2>MVP란?</h2>
<p>MVP는 제품의 핵심 가치를 시장에 신속하게 전달하기 위해 가장 필수적인 기능으로만 구성된 초기 제품 버전입니다. MVP는 완벽한 제품을 개발하기 전에 시장에서의 반응을 빠르게 확인하고, 고객의 피드백을 바탕으로 제품을 개선해 나가는 데 중점을 둡니다.</p>
<h3>MVP를 구현하기 위한 고려사항</h3>
<ol>
<li>
<p><strong>접근 방법</strong>: MVP의 핵심은 제품의 본질적인 기능과 가치 제안을 명확히 정의하는 것입니다. 제품의 가장 중요한 기능이 무엇인지, 그 기능이 사용자의 문제를 어떻게 해결하는지를 집중적으로 고려해야 합니다.</p>
</li>
<li>
<p><strong>목표</strong>: MVP의 목표는 초기 고객으로부터 실제 피드백을 받아 제품을 반복적으로 개선하는 과정입니다. 이를 통해 시장의 요구에 빠르게 대응하고, 제품의 완성도를 높여갈 수 있습니다.</p>
</li>
<li>
<p><strong>타겟</strong>: 초기 고객(얼리 어답터)을 주요 타겟으로 설정합니다. 이들은 새로운 기술이나 제품에 대한 관심이 높으며, 피드백 제공에 적극적입니다.</p>
</li>
<li>
<p><strong>구현</strong>: MVP는 가장 중요한 기능을 포함한 실제 제품의 첫 번째 버전으로 구현됩니다. 이 버전은 기본적인 사용자 경험을 제공할 수 있어야 하며, 초기 시장 진입에 적합해야 합니다.</p>
</li>
</ol>
<h3>MVP 프로세스를 사용하는 이유</h3>
<ul>
<li>
<p><strong>비용 및 시간 절약</strong>: MVP를 통해 초기 개발 비용과 시간을 절감할 수 있습니다. 완전한 제품을 개발하기 전에 최소한의 기능만으로 시장의 반응을 확인함으로써, 불필요한 리소스 낭비를 방지합니다.</p>
</li>
<li>
<p><strong>잘못된 개발 방향에 대한 리스크 감소</strong>: MVP를 통해 시장의 반응을 조기에 확인할 수 있어, 잘못된 가정이나 방향으로의 개발을 피할 수 있습니다.</p>
</li>
</ul>
<h3>MVP의 3대 구성 요소</h3>
<ol>
<li>
<p><strong>최소(Minimum)</strong>: 핵심 기능만을 포함하여 빠르게 개발 및 배포 가능한 수준으로 구성합니다.</p>
</li>
<li>
<p><strong>실행 가능(Viable)</strong>: 사용자가 실제로 사용할 수 있고, 가치를 느낄 수 있도록 실행 가능한 상태여야 합니다.</p>
</li>
<li>
<p><strong>경쟁력(Competitive)</strong>: 단순한 프로토타입이 아닌, 시장에서 경쟁력 있는 제품으로 자리잡을 수 있도록 전략적으로 구성되어야 합니다.</p>
</li>
</ol>
<h2>RAT란?</h2>
<p>RAT는 제품 개발 과정에서 가장 리스크가 큰 가정을 식별하고, 이를 검증하기 위해 최소한의 실험을 수행하는 방법입니다. RAT는 개발 과정의 초기 단계에서 적용하여, 제품이 실패할 수 있는 가능성을 미리 확인하고, 이를 바탕으로 리스크를 최소화하는 데 초점을 맞춥니다.</p>
<h3>MVP를 완성하기 위한 RAT의 역할</h3>
<p>RAT는 MVP를 보완하고 리스크를 줄이는 중요한 도구입니다. RAT를 통해 가장 위험한 가정을 먼저 테스트함으로써, 제품 개발 과정에서 발생할 수 있는 실패의 가능성을 줄이고, 비용과 시간을 절감할 수 있습니다. RAT는 MVP가 너무 다양한 범위를 포함하고 있을 때, 이를 구체화하고 리스크를 줄이는 데 중요한 역할을 합니다.</p>
<h3>RAT를 수행하는 방법</h3>
<ol>
<li>
<p><strong>주요 기능 정리</strong>: 제품의 핵심 기능을 식별하고, 이들 기능이 사용자에게 실제로 가치를 제공하는지 테스트합니다.</p>
</li>
<li>
<p><strong>리스크 식별 및 테스트</strong>: 개발 과정에서 발생할 수 있는 주요 리스크를 식별하고, 이를 검증하는 테스트를 진행합니다.</p>
</li>
<li>
<p><strong>크리티컬 리스크 선별</strong>: 가장 중요한 리스크를 우선적으로 테스트하여, 제품의 실패 가능성을 줄입니다.</p>
</li>
<li>
<p><strong>테스트 방법</strong>: 설문조사, 인터뷰, 세부 분석, 단순한 랜딩페이지, 현장 조사 등 다양한 방법을 활용해 가정을 검증합니다.</p>
</li>
</ol>
<h3>RAT의 필요성</h3>
<p>MVP의 다양한 버전과 가정을 검증하는 과정에서 RAT는 필수적입니다. RAT를 통해 초기 단계에서 리스크를 식별하고, 이를 바탕으로 MVP의 성공 가능성을 높일 수 있습니다.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Notion 유료 플랜 사용 후기(Notion 블로그 후기)</title>
      <link>https://www.levih.me/vue-press/tech-product/saas/Notion%20%EC%9C%A0%EB%A3%8C%20%ED%94%8C%EB%9E%9C%20%EC%82%AC%EC%9A%A9%20%ED%9B%84%EA%B8%B0(Notion%20%EB%B8%94%EB%A1%9C%EA%B7%B8%20%ED%9B%84%EA%B8%B0).html</link>
      <guid>https://www.levih.me/vue-press/tech-product/saas/Notion%20%EC%9C%A0%EB%A3%8C%20%ED%94%8C%EB%9E%9C%20%EC%82%AC%EC%9A%A9%20%ED%9B%84%EA%B8%B0(Notion%20%EB%B8%94%EB%A1%9C%EA%B7%B8%20%ED%9B%84%EA%B8%B0).html</guid>
      <source url="https://www.levih.me/vue-press/rss.xml">Notion 유료 플랜 사용 후기(Notion 블로그 후기)</source>
      <description>Notion 유로 플랜 사용해보기</description>
      <category>Tech Product</category>
      <pubDate>Mon, 22 Jul 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>Notion 유로 플랜 사용해보기</li>
</ul>
<!-- more -->
<h2>개요</h2>
<p>Notion에서 최근 “사이트” 프로덕트를 업데이트 하였으며, 이를 사용하여 Notion으로 직접 블로그를 운영해 볼까 하여 유료플랜을 결제!</p>
<p>해당 내용에 대한 사용 후기를 정리 하려고 한다.</p>
<figure><figcaption></figcaption></figure>
<h2>Notion Sites 업데이트!</h2>
<p><a href="https://www.notion.so/ko-kr/product/sites" target="_blank" rel="noopener noreferrer">Notion –&nbsp;Publish anything, fast</a></p>
<p>사실 보면 알겠지만, 일전에 있는 기능들에서 Favicon(파비콘), 검색 인덱싱(SEO) 추가 밖에 없는 것 같지만 별도의 프로덕트로 구분하여 추가 한 것을 보니,</p>
<p>앞으로 노션에서 노션을 윕사이트로 사용 할 수 있도록 업데이트를 할 것을 기대한다.</p>
<p>유로 플랜을 결제 하고 사용해 보자.(개비쌈)</p>
<figure><figcaption></figcaption></figure>
<h2>Site 공유 상세 설정 기능 정리</h2>
<ol>
<li>
<p>“공유” 클릭시 메인 구성</p>
<p>자동으로 생성되는 URL과 사이트 사용자 지정, 검색엔진 인덱싱, 링크 만료 기간 설정이 있다.</p>
</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li>
<p>사이트 사용자 지정 설정(New)</p>
<p>Open Graph와 파비콘, GA를 설정 할 수 있다.</p>
<p>그리고 ‘제목’이라고 변역이 되어 있는데, 상단 Nav를 수정 할 수 있는 기능이다.</p>
<p>OG와 Thema, 파비콘은 특별한게 없고, 제목(Nav)을 상세히 살펴 보겠다.</p>
<figure><figcaption></figcaption></figure>
</li>
</ol>
<ul>
<li>이동 경로 : 브레드 스럼 노출 여부</li>
<li>메인 검색 노출 여부</li>
<li>템플릿으로 복제 버튼 노출 여부</li>
<li>Notion 워터마크 노출 여부(플러스 계정 전용)</li>
<li>GA 코드 설정</li>
</ul>
<p>⭐️ 페이지 단축키(플러스 계정 전용) : 공유된 페이지의 하위 페이지들을 상단의 메뉴로 등록 할 수 있다. (GNB로 생각하면 쉽다)</p>
<div class="hint-container info">
<p class="hint-container-title">정보</p>
<p>보이는 문제로는 모바일에서 해당 메뉴들이 보이지 않고 햄버거 처리도 되지 않는다.</p>
</div>
<figure><figcaption></figcaption></figure>
<ol start="3">
<li>
<p>검색엔진 인덱싱</p>
<p>거창하게 “검색엔진 인덱싱”이라고 써놓았지만, OG 이미지, Title, Description을 설정 하는 공간이다.</p>
<figure><figcaption></figcaption></figure>
</li>
</ol>
<h2>도메인 설정</h2>
<p>사실 이것 때문에 해당 포스트를 쓰게 되었다.</p>
<p>유료 플랜은 Notion.site의 서브도메인을 5개까지 생성 할 수 있다.</p>
<p>하지만, 사용자 지정 도메인. 즉, <strong>개인 도메인은 추가로 월 14,000원</strong>을 내야한다. 도둑놈들 아닌가…</p>
<p><br>
</p>
<h2>사이트 빌드 후 SEO 체크 및 후기</h2>
<p>체크 사이트는 <a href="https://novela-soft.com/" target="_blank" rel="noopener noreferrer">https://novela-soft.com/</a> , <a href="https://pagespeed.web.dev/" target="_blank" rel="noopener noreferrer">https://pagespeed.web.dev/</a> 두곳에서 체크해봤다.</p>
<p>내 개인 블로그는 Vercel의 무료플랜으로 빌드하고 있다. 성능면에서는 당연히 Notion 사이트 보다 낮은 것이 맞다고 생각 하지만 SEO 면에서 보면, 여러 문제 들이 있었다.</p>
<ol>
<li>
<p>구글써치콘솔 등록 불가</p>
<p>여러번 시도를 했고 다음날에도 시도를 해보았으나, 불가능 했다.<br>
</p>
</li>
<li>
<p>네이버 써치 어드바이져 등록 불가</p>
<p>네이버 웹마스터 도구에 등록 하기 위해선 하기 이미지처럼 2가지 방법밖에 없는데, 이부분은 notion에서 불가능한 방법이다.<br>
</p>
</li>
<li>
<p>Sitemap.xml 문제</p>
<p>Sitemap을 들어가보면 알겠지만, <a href="http://notion.so" target="_blank" rel="noopener noreferrer">notion.so</a> 사이트의 사이트맵을 보여주고있다… 이게 무슨…</p>
<figure><figcaption></figcaption></figure>
</li>
</ol>
<h2>결론</h2>
<p>notion 유로 플랜에서 제공하는 Sites는 아직 미완성인 것 같다. 특히 커스텀 도메인을 추가 비용을 지불해야 하는 점음 조금 실망 스러웠다.</p>
<p>robots.txt나 sitemap.xml 도 조금 찾아 보니 서브도메인인 경우 각가의 폴더마다 다시 세팅 해주어야 한다고 한다. 이와 같은 점으로 커스텀 도메인을 사용하지 않는다면, robots.txt나 sitemap.xml 설정이 많이 힘들어 보인다.</p>
]]></content:encoded>
    </item>
    <item>
      <title>WEEK00-시작</title>
      <link>https://www.levih.me/vue-press/dev/SW%EC%82%AC%EA%B4%80%ED%95%99%EA%B5%90%EC%A0%95%EA%B8%80/WEEK00-%EC%8B%9C%EC%9E%91.html</link>
      <guid>https://www.levih.me/vue-press/dev/SW%EC%82%AC%EA%B4%80%ED%95%99%EA%B5%90%EC%A0%95%EA%B8%80/WEEK00-%EC%8B%9C%EC%9E%91.html</guid>
      <source url="https://www.levih.me/vue-press/rss.xml">WEEK00-시작</source>
      <description>SW사관학교 정글 5기 00주차 후기</description>
      <category>Dev</category>
      <pubDate>Sat, 24 Sep 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>SW사관학교 정글 5기 00주차 후기</li>
</ul>
<!-- more -->
<p>9월 19일부터&nbsp; SW사관학교 정글 정식 일정이 시작됐다.</p>
<h2>ORIENTATION</h2>
<ol>
<li>
<p>임원진 분들의 소개와 PT 발표 후 바로 시작됐다.</p>
</li>
<li>
<p>발표를 보는데 유튜브 보는 기분이었다. 매번 볼 때마다 느끼는 거지만 바쁘신 중에 와주시는 것이 정말 힘이 된다.</p>
</li>
</ol>
<h2>첫 번째 과제(3박 4일간 미니 프로젝트 만들기)</h2>
<ol>
<li>
<p>과제 소개는 매우 간단하다.</p>
</li>
<li>
<p>한 조당 3명으로 구성되며, 로그인 기능/Jinja2 탬플릿을 이용한 서버사이드 렌더링, JWT 인증방식을 적용하여 홈페이지 하나 만들면 된다.</p>
</li>
<li>
<p>기숙사에서 노트북만 가져왔는데, 일정은 그렇게 바로 시작되었다.</p>
</li>
</ol>
<h2>주제 선정 및 PT 준비</h2>
<ol>
<li>
<p>조를 정말 잘 만났다. 힘든 정글 일정에 지금까지도 큰 힘이 되고 있다.</p>
</li>
<li>
<p>주제는 익명의 커뮤니티를 만들어 게시판과 댓글로 소통을 하는 공간을 기획했다.</p>
</li>
<li>
<p>주제발표는 다른 조원분이 해주셨다.</p>
</li>
</ol>
<h2>프로젝트 시작</h2>
<ol>
<li>
<p>이전 회사에서 게시판에 댓글 기능을 달아달라고 했던 나에게 욕하고 싶었다.</p>
</li>
<li>
<p>로그인 기능이 추가되면서 로그인 후 접속하는 모든 컨탠츠들에 대해 고려해야 할 점들이 생기며, 이로 인해 API의 구조가 중요한 것을 크게 느꼈다.</p>
</li>
<li>
<p>우리 조는 전공자도 없으며, JAVA를 공부하고 왔던 분이 개발 쪽 경험이 가장 많으셨다.</p>
</li>
<li>
<p>나로서는 너무 막막했지만 다시 한번 조원들에게 감사하다.</p>
</li>
<li>
<p>기능별로 작업을 나눠서 시작했으며, 나는 회원가입 기능을 맡았다.</p>
</li>
<li>
<p>한 번도 해보지 못했지만 결국 했다. 내 기준에 깔끔하게 잘된 거 같다.</p>
</li>
<li>
<p>회원가입을 먼저 완료하여 게시판 댓글 기능을 내가 먼저 시작했다.</p>
</li>
</ol>
<h2>문제 봉착</h2>
<ol>
<li>
<p>계획은 이랬다. (누구나 그럴싸한 계획은 있다.)</p>
<ul>
<li>작성자가 로그인 후 a게시판에 댓글을 쓴다.</li>
<li>작성되면 서버로 보내 별도의 댓글 db에 넣는다.</li>
<li>성공하면 return 받아 jinja2로 a게시판에 뿌려준다.</li>
<li>댓글에는 등록자의 이름(익명)과 댓글 내용이 보인다.</li>
</ul>
</li>
<li>
<p>문제 1, 댓글을 작성한 게시판을 판별하기</p>
<ul>
<li>댓글 등록 기능을 만들고 jinja2로 불러오려고 하니, 웬걸, 게시판을 판별할 고유 키가 없었다.</li>
<li>하지만 mongodb는 오브젝트 ID가 있었고, 게시판을 만들고 있는 조원에게 jinja2로 게시글 불러올 때 해당 오브젝트 ID도 같이 불러올 것을 요청했다.</li>
<li>그리고 내 생각은 '프런트에서 jinja2로 반복문 돌려 댓글 가져오면 되겠네, 개꿀'이라고 생각했다.</li>
<li>그러나, 이놈에 jinja2는 내 생각처럼 해주지 않았고 거의 5시간을 붙잡았지만 결국 이 방법은 실패했다.</li>
<li>그래서 방법을 바꾸어 Flask에서 먼저 체크를 하고 jinja2로 보내주는 방식으로 변경했다.(이 부분은 다른 조원분이 크게 도와주셨다. 다시 한번 감사합니다.)</li>
<li>해결 완료</li>
</ul>
</li>
<li>
<p>문제 2, 게시물 '더보기' 버튼</p>
<ul>
<li>게시물에 '더보기'버튼이 있고 이걸 클릭하면 뿅 하고 게시물의 내용과 댓글이 보이는 방식이다.</li>
<li>javascript를 공부한 나에게 이건 껌이지 하는 생각으로 구현 후 실행했다.</li>
<li>근데, 더보기를 누르면 모든 게시판이 더보기가 됐다.</li>
<li>의도와 다르게 홈페이지는 너무 풍성해졌고, '아 이것도 어떤 게시판인지 읽어 와야 하는구나' 깨달은 나는 바로 수정했다.</li>
<li>완료</li>
</ul>
</li>
<li>
<p>문제 3, 댓글 입력 후 더보기 버튼 닫힘</p>
<ul>
<li>댓글은 더보기 버튼으로 열어야 입력할 수 있다.</li>
<li>근데, 댓글을 입력하면 더보기 버튼이 닫혀버린다.</li>
<li>내가 댓글을 입력하고 등록하면 그걸 보기 위해 다시 클릭을 해야 한다? 내가 사용자라면 생각만 해도 너무 화난다.</li>
<li>사용자의 편의성을 회사에서부터 중요하게 생각해 온 난 해결할 수 있을 것이란 믿음으로 수정했다.</li>
<li>그러나, 안됐다. 여러분들과 구글님에게 물어봤지만 답을 얻을 수 없었다.</li>
<li>그렇게 제출 시간이 나가 와서 제출해버렸다.</li>
</ul>
</li>
</ol>
<h2>프로젝트 발표</h2>
<ol>
<li>
<p>이번 발표는 내가 맡았다.</p>
</li>
<li>
<p>나름 회사에서 PT를 많이 해봤던 난 자신감이 있었다.라고 최면을 걸기 시작했다.</p>
</li>
<li>
<p>발표는 의장님과 코치님이 봐주셨는데, 난 긴장을 너무해서 시연하는데 계속 오타가 났다.</p>
</li>
<li>
<p>발표가 나름 재밌었나 보다. 동기들이 오타도 일부로 낸 줄 알았다고 했다. 난 손 떨어서 낸 건데.</p>
</li>
</ol>
<h2>WEEK00 후 느낀 점</h2>
<ol>
<li>
<p>성장했다</p>
<ul>
<li>난 이 감정을 느끼기 위해 정글에 지원했고 또 이전에도 살았었다.</li>
<li>어제보다 오늘 더 성장했다는 생각이 들어 좋았다.</li>
</ul>
</li>
<li>
<p>팀의 중요성</p>
<ul>
<li>전도서에 이런 말이 있다. '한 사람이면 패하겠거니와 두 사람이면 능이당하나니 삼겹줄은 쉽게 끊어지지 않는다'</li>
<li>내가 좋아하는 말이고 정글에 와서 매주 느낄 거 같다.</li>
</ul>
</li>
<li>
<p>부족한 점</p>
<ul>
<li>너무 많다. 아직 자료형에 대해서도 정확히 공부하지 못했고 문법공부도 할게 많다.</li>
<li>특히 API를 다루는 부분은 정말 모르겠다.</li>
<li>앞으로 더 노력해야 할 것 같다</li>
</ul>
</li>
<li>
<p>그럼에도 할 수 있다.</p>
<ul>
<li>그럼에도 조금씩 앞으로 가는 게 정글이다.</li>
<li>늦어도 조금씩 가면 뒤를 돌아봤을 때 내가 온 길을 뿌듯하게 볼 수 있기를 바래본다.</li>
</ul>
</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>WEEK00-입성전</title>
      <link>https://www.levih.me/vue-press/dev/SW%EC%82%AC%EA%B4%80%ED%95%99%EA%B5%90%EC%A0%95%EA%B8%80/WEEK00-%EC%9E%85%EC%84%B1%EC%A0%84.html</link>
      <guid>https://www.levih.me/vue-press/dev/SW%EC%82%AC%EA%B4%80%ED%95%99%EA%B5%90%EC%A0%95%EA%B8%80/WEEK00-%EC%9E%85%EC%84%B1%EC%A0%84.html</guid>
      <source url="https://www.levih.me/vue-press/rss.xml">WEEK00-입성전</source>
      <description>SW사관학교 정글 5기 00주차 입성 전 후기</description>
      <category>Dev</category>
      <pubDate>Sat, 24 Sep 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>SW사관학교 정글 5기 00주차 입성 전 후기</li>
</ul>
<!-- more -->
<p>지금 내가 공부하고 있는 SW 사관학교 정글 시작 전 이야기를 작성한다.</p>
<h2>개발 공부를 시작한 계기</h2>
<ol>
<li>
<p>기획자로서의 업무 이해</p>
<ul>
<li>처음의 시작은 이전 회사에서 기획자로 일함으로써 전반적인 업무의 이해를 위해 시작했다.</li>
<li>도움은 정말 많이 되었다. 기획자를 희망하는 분들이 계시다면 개발자가 프로그래밍하는 방식을 미리 아는 것이 중요하다고 말하고 싶다.</li>
</ul>
</li>
<li>
<p>개인(나)의 발전을 위해</p>
<ul>
<li>개발을 공부하면서 처음으로 느낀 점은 '죽을 때까지 공부해야겠는데?'였다.</li>
<li>난 전 회사에서 크게 성장했다고 생각한다. 다만 2년 차가 넘었을 때는 기획자로 더 이상 성장할 방법을 찾지 못했다.</li>
<li>회사의 문제가 큰 것으로 생각되나, 기획자로 더 큰 목적은 보이지 않았고 개발로 새로운 목적과 목표를 설정했다.</li>
</ul>
</li>
</ol>
<h2>본격적으로 개발을 시작한 계기</h2>
<ol>
<li>
<p>낚시하는 법을 가리키는 정글</p>
<ul>
<li>정글은 지인이 처음 소개를 해줬고, 평소에 정말 믿을만한 지인이기에 정글 홈페이지에서 커리큘럼과 후기들을 찾아봤다.</li>
<li>난 나무를 심기 전에 숲을 보는 것을 좋아한다. 전체를 알아야 디테일을 잘할 수 있다고 생각하기 때문이다.</li>
<li>정글은 그런 생각을 갖고 있는 나를 설득하기에 딱 맞는 커리큘럼을 갖고 있었다.</li>
</ul>
</li>
<li>
<p>그래서 회사는 어떡할 거야</p>
<ul>
<li>관뒀다. 정말 쉽지 않은 결정이었지만 3년간 열심히 했어서 전혀 후회나 미련은 없었다.</li>
</ul>
</li>
<li>
<p>나이가 많아서 걱정</p>
<ul>
<li>빠른 나이는 분명 아니다. 하지만 난 성격상 안주하지 못한다. 더 발전하고 성장, 배우고 싶다.</li>
<li>그런 것에 난 큰 행복을 느끼고, 그거 하나로 나의 결정은 옳다.</li>
</ul>
</li>
</ol>
<h2>입학시험 준비, 그리고 합격</h2>
<ol>
<li>
<p>업무와 병행한 공부</p>
<ul>
<li>퇴사한다고는 했으나, 양심상 바로 뛰쳐나오지는 못했다.</li>
<li>그래서 정글 입학시험 전까지도 계속 업무와 공부를 병행했다. (이런 시간이 있어 지금 정글에서 버틸 수 있던 거 같다)</li>
</ul>
</li>
<li>
<p>시험 및 인터뷰</p>
<ul>
<li>기능 한 개를 구연 못했다. 원인은 자바스크립트에 대한 공부가 부족했다.</li>
<li>백앤드에 대해서는 전혀 모르는 상태라 Flask에 대해서만 공부를 많이 했었다.</li>
<li>1차 합격 후 인터뷰를 진행하였고, 모든 운영진 분들이 직접 들어오신 것을 보며 떨리면서 감사하다는 생각이 들었다.</li>
</ul>
</li>
<li>
<p>최종 결과</p>
<ul>
<li>합격</li>
<li>고민하지 않고 입소 준비를 하였으며, 자바스크립트 공부를 계속했다.(python 공부나 좀 더 할걸...)</li>
</ul>
</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>WEEK02-회고</title>
      <link>https://www.levih.me/vue-press/dev/SW%EC%82%AC%EA%B4%80%ED%95%99%EA%B5%90%EC%A0%95%EA%B8%80/WEEK02-%ED%9A%8C%EA%B3%A0.html</link>
      <guid>https://www.levih.me/vue-press/dev/SW%EC%82%AC%EA%B4%80%ED%95%99%EA%B5%90%EC%A0%95%EA%B8%80/WEEK02-%ED%9A%8C%EA%B3%A0.html</guid>
      <source url="https://www.levih.me/vue-press/rss.xml">WEEK02-회고</source>
      <description>SW사관학교 정글 5기 2주차 회고</description>
      <category>Dev</category>
      <pubDate>Fri, 07 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>SW사관학교 정글 5기 2주차 회고</li>
</ul>
<!-- more -->
<h2>지금까지 무얼 했나.</h2>
<p>별다른 형식 없이 일기처럼 작성하겠다.</p>
<p>01주 차부터 04주 차 까지는 '컴퓨팅 사고로의 전환'이다.</p>
<p>알고리즘의 기본적인 개념 공부와 관련 백준 문제들을 풀어보며 공부하고 목요일마다 테스트를 보고 있다.</p>
<p>01주 차는 기본적인 연산, 수학, 재귀 함수, 완전 탐색을 주제로 공부하였고, 02주 차는 이분 탐색, 분할 정복, 스택, 큐, 우선 큐와 같은 주제로 공부를 진행했다.</p>
<p>결론적으론 어려웠다. 개념도 정확히 잡지 못하는 파트들이 많았다.</p>
<p>오늘 이 일지를 정리하면서 내가 부족한 점을 생각해보고 어떻게 해결 해야 할지 고민하겠다.</p>
<h2>그래서 문제가 무엇인가.</h2>
<p>내가 지금까지 진도를 따라가지 못하고 모자른 이유에 대해 생각한 문제는 다음과 같이 생각한다.</p>
<ol>
<li>
<p>공부의 양</p>
<p>중고등학교때도 대학교 때도 난 공부를 해야 하는 상황에 늘 이렇게 생각했다.</p>
<p>'어떡하면 공부를 잘 할 수 있을까. 왜 공부를 해도 성과가 없을까.'</p>
<p>공부를 못하는 사람의 특징이다. 방법을 바꿔가며 해보지도 않고 조금 열심히 했다고 왜 성과가 나지 않나 착각하는 유형이다. 지금 정글에서 잘하는 사람들을 보면 나보다 몇십 개, 몇백 개 문제를 더 많이 풀어본 사람들이다. 단순히 코딩의 경험도 나보다 당연히 많다.</p>
<p>그런데 난 남들과 똑같이 하며 따라가길 원하고 있는 거 같다. <strong>해보고 말해라. 천재도 아니고 지름길도 없다.</strong></p>
</li>
<li>
<p>공부의 방법</p>
<p>오늘 동기의 말처럼 01주차~04주차의 일정은 기본적인 지식이며, 개념을 익히고 완전히 숙지하는 것이 더 중요하다고 생각한다. 30분 쳐다보고 풀 방법이 떠오르지 않으면 내가 모르는 문제인 것을 빠르게 인정하자. <strong>모르면 배우면 된다.</strong></p>
</li>
<li>
<p>공부의 질</p>
<p>강의실에 12시간 이상씩 있는데 모든 시간동안 집중할 수 없는 건 어쩔 수 없다. 하지만 완전한 집중을 하는 시간이 <strong>30분도 안되는 것은 문제</strong>가 있다.</p>
</li>
</ol>
<h2>그래서 어떻게 개선할 것인가.</h2>
<ol>
<li>
<p>난이도 하 문제는 20분 이상 고민하지 않는다.</p>
<p>주어지는 문제들 중 난이도가 '하'인 문제들 중 90%는 기본적인 개념을 요하는 문제다. 근데 내가 이걸 20분간 고민해도 모르겠다? 개념이 없는 거다. 빠르게 인정하고 답을 본다. 이때 내가 고민할 것은 다음과 같다.</p>
<ul>
<li>코드해석을 한다.</li>
<li>그 코드에서 사용한 python 문법 중 모르는 부분을 체크 후 공부한다.</li>
<li>새로운 주제가 있다면 공부, 정리, 말한다.</li>
<li>문제 접근 방법에 대해 공부하고 내가 다시 정리해본다.</li>
<li>코드를 직접 써본다.</li>
<li>관련 문제가 있다면 풀어본다.</li>
<li>못풀면 반복</li>
</ul>
</li>
<li>
<p>난이도 중 문제는 최대한 직접 풀어보려 한다.</p>
<ul>
<li>단, 이것도 고민은 최대 한 시간으로 한다.</li>
</ul>
</li>
<li>
<p>하루 2시간은 01~02주차의 주요 개념들에 대해 관련 문제를 다시 풀어본다.</p>
<ul>
<li>관련 문제가 없다면 했던 문제들로 다시 풀어본다.</li>
</ul>
</li>
<li>
<p>개념공부는 문제와 함께 한다.</p>
<ul>
<li>경험해본 바 개념은 문제와 함께 기억하는 게 머리에 잘 남았다.</li>
<li>1번 사항처럼 공부하면 될 것 같다.</li>
</ul>
</li>
<li>
<p>25분 집중 5분 휴식</p>
<p>포모도로 기법이란다. 해보자.</p>
</li>
</ol>
<h2>끝으로.</h2>
<p><strong>진정으로 무언가를 열심히 한적이 있는가?</strong></p>
<p><strong>누군가 물어봤을때 질적으로 양적으로 바로 이 시기였다고 당당히 말할 수 있도록 하자.</strong></p>
]]></content:encoded>
    </item>
    <item>
      <title>WEEK03-회고</title>
      <link>https://www.levih.me/vue-press/dev/SW%EC%82%AC%EA%B4%80%ED%95%99%EA%B5%90%EC%A0%95%EA%B8%80/WEEK03-%ED%9A%8C%EA%B3%A0.html</link>
      <guid>https://www.levih.me/vue-press/dev/SW%EC%82%AC%EA%B4%80%ED%95%99%EA%B5%90%EC%A0%95%EA%B8%80/WEEK03-%ED%9A%8C%EA%B3%A0.html</guid>
      <source url="https://www.levih.me/vue-press/rss.xml">WEEK03-회고</source>
      <description>SW사관학교 정글 5기 3주차 회고</description>
      <category>Dev</category>
      <pubDate>Sat, 15 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>SW사관학교 정글 5기 3주차 회고</li>
</ul>
<!-- more -->
<h2>주제</h2>
<p><strong>그래프(vertex, edge, node, arc), BFS, DFS, 위상 정렬</strong></p>
<h2>목표</h2>
<ol>
<li>
<p>테스트에서 한 문제 맞히기**</p>
</li>
<li>
<p>개념 이해 하기**</p>
</li>
<li>
<p>주어진 문제 모두 풀기**</p>
</li>
</ol>
<h2>과정(공부 방식)</h2>
<ol>
<li>
<p>공부 질 늘리기</p>
<ul>
<li>시간 대비 집중했던 시간은 늘어났다.</li>
</ul>
</li>
<li>
<p>풀었던 문제 다시 풀어보기</p>
<ul>
<li>반 정도는 풀었던 문제를 다시 풀어보는 시간을 갖었다.</li>
</ul>
</li>
<li>
<p>동기들에게 이해되지 않는 알고리즘 설명 듣고 정리하기</p>
</li>
<li>
<p>별도의 강의실에서 집중해보기</p>
</li>
<li>
<p>개념 정리하기(블로그)</p>
</li>
</ol>
<h2>결과</h2>
<ol>
<li>
<p>테스트에서 한 문제도 풀지 못 했다.</p>
</li>
<li>
<p>개념에 대해 정확히 이해를 못했다.</p>
</li>
<li>
<p>공부의 질과 양을 많이 늘렸다.</p>
</li>
<li>
<p>블로그에 정리는 하루에 하나 이상 했다.</p>
</li>
</ol>
<h2>문제점과 해결방안</h2>
<ol>
<li>
<p>이해의 깊이(Why?)</p>
<ul>
<li>많은 가정과 사회가 '왜'라고 묻는 질문에 거부감이 많다고 생각한다. 그래서 점점 이유 없이 하는 행동과 생각들이 많아진다고 생각한다. 심지어 회사에서는 토를 단다는 말까지 들으며 살았다. 내가 그랬다.</li>
<li>하지만 정글은 다르다. '왜'라는 질문에 내 이해의 깊이를 만들고 발전을 만든다.</li>
<li>심지어 '왜'라고 계속해서 되물으며 생각하고 말하게 한다.</li>
<li>앞으로 이전에 생각은 버리고 계속해서 문제와 개념에 '왜'라는 질문을 던지며 공부하고 이해하려고 해야 한다.</li>
</ul>
</li>
<li>
<p>문제 접근방법에 대한 능력</p>
<ul>
<li>새로운 문제를 접했을 때 이 문제를 해결하는 사람은 두 가지의 사람이 있다.</li>
<li><strong>지혜로 해결하는 사람, 경험으로 해결하는 사람</strong></li>
<li>난 당연히 천재가 아니기에 경험으로 문제를 해결해 나가야 한다.</li>
<li>이 말인 즉, 다양한 문제 해결방법을 경험해야 한다.</li>
<li>우선 주어진 문제를 깊이 이해하며 풀고 다양한 문제를 더 풀어봐야겠다.</li>
</ul>
</li>
</ol>
<h2>느낀 점</h2>
<p>재밌다. '왜'라는 질문에 문제가 보이고, 내가 무엇을 모르는지, 무엇을 해야 하는지가 들어온다.</p>
<p>다음 시험 꼭 잘 보자.</p>
]]></content:encoded>
    </item>
    <item>
      <title>WEEK05-RedBlackTree 구현_C</title>
      <link>https://www.levih.me/vue-press/dev/SW%EC%82%AC%EA%B4%80%ED%95%99%EA%B5%90%EC%A0%95%EA%B8%80/WEEK05-RedBlackTree%20%EA%B5%AC%ED%98%84_C.html</link>
      <guid>https://www.levih.me/vue-press/dev/SW%EC%82%AC%EA%B4%80%ED%95%99%EA%B5%90%EC%A0%95%EA%B8%80/WEEK05-RedBlackTree%20%EA%B5%AC%ED%98%84_C.html</guid>
      <source url="https://www.levih.me/vue-press/rss.xml">WEEK05-RedBlackTree 구현_C</source>
      <description>SW사관학교 정글 5기 5주차 회고</description>
      <category>Dev</category>
      <pubDate>Fri, 11 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>SW사관학교 정글 5기 5주차 회고</li>
</ul>
<!-- more -->
<p>해당 내용은 정확하지 않을 수 있습니다.</p>
<p>그래서 당연히 귀한 시간 내주시어 지적해 주시면 감사 드리겠습니다.</p>
]]></content:encoded>
    </item>
    <item>
      <title>WEEK06-malloc함수 구현_C</title>
      <link>https://www.levih.me/vue-press/dev/SW%EC%82%AC%EA%B4%80%ED%95%99%EA%B5%90%EC%A0%95%EA%B8%80/WEEK06-malloc%ED%95%A8%EC%88%98%20%EA%B5%AC%ED%98%84_C.html</link>
      <guid>https://www.levih.me/vue-press/dev/SW%EC%82%AC%EA%B4%80%ED%95%99%EA%B5%90%EC%A0%95%EA%B8%80/WEEK06-malloc%ED%95%A8%EC%88%98%20%EA%B5%AC%ED%98%84_C.html</guid>
      <source url="https://www.levih.me/vue-press/rss.xml">WEEK06-malloc함수 구현_C</source>
      <description>SW사관학교 정글 5기 6주차 회고</description>
      <category>Dev</category>
      <pubDate>Sat, 12 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>SW사관학교 정글 5기 6주차 회고</li>
</ul>
<!-- more -->
<p>해당 내용은 정확하지 않을 수 있습니다.</p>
<p>귀한 시간 내주시어 지적해 주시면 감사드리겠습니다.</p>
]]></content:encoded>
    </item>
    <item>
      <title>WEEK07-웹 서버 구축(Tiny서버, Proxy)_C언어</title>
      <link>https://www.levih.me/vue-press/dev/SW%EC%82%AC%EA%B4%80%ED%95%99%EA%B5%90%EC%A0%95%EA%B8%80/WEEK07-%EC%9B%B9%20%EC%84%9C%EB%B2%84%20%EA%B5%AC%EC%B6%95(Tiny%EC%84%9C%EB%B2%84_%20Proxy)_C%EC%96%B8%EC%96%B4.html</link>
      <guid>https://www.levih.me/vue-press/dev/SW%EC%82%AC%EA%B4%80%ED%95%99%EA%B5%90%EC%A0%95%EA%B8%80/WEEK07-%EC%9B%B9%20%EC%84%9C%EB%B2%84%20%EA%B5%AC%EC%B6%95(Tiny%EC%84%9C%EB%B2%84_%20Proxy)_C%EC%96%B8%EC%96%B4.html</guid>
      <source url="https://www.levih.me/vue-press/rss.xml">WEEK07-웹 서버 구축(Tiny서버, Proxy)_C언어</source>
      <description>SW사관학교 정글 5기 7주차 회고</description>
      <category>Dev</category>
      <pubDate>Sun, 13 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>SW사관학교 정글 5기 7주차 회고</li>
</ul>
<!-- more -->
<p>해당 내용은 정확하지 않아 개발 공부에 도움이 되지 않습니다.</p>
<p>귀한 시간 내주시어 지적해 주시면 감사 드리겠습니다.</p>
]]></content:encoded>
    </item>
    <item>
      <title>WEEK08-PintOS_Project1_Threads</title>
      <link>https://www.levih.me/vue-press/dev/SW%EC%82%AC%EA%B4%80%ED%95%99%EA%B5%90%EC%A0%95%EA%B8%80/WEEK08-PintOS_Project1_Threads.html</link>
      <guid>https://www.levih.me/vue-press/dev/SW%EC%82%AC%EA%B4%80%ED%95%99%EA%B5%90%EC%A0%95%EA%B8%80/WEEK08-PintOS_Project1_Threads.html</guid>
      <source url="https://www.levih.me/vue-press/rss.xml">WEEK08-PintOS_Project1_Threads</source>
      <description>SW사관학교 정글 5기 8주차 회고</description>
      <category>Dev</category>
      <pubDate>Thu, 17 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>SW사관학교 정글 5기 8주차 회고</li>
</ul>
<!-- more -->
<h2>1. PintOS 동기화에 관한 주요 용어 정리</h2>
<h3>1) 스레드(Thread)</h3>
<ul>
<li>프로세스 ‘내’에서 실행되는 흐름의 ‘단위’를 말한다.</li>
<li>멀티 스레드(multi_thread) : 프로세스 내에는 최소 한개 이상의 스레드가 실행 될 수 있다.</li>
<li>아주 큰 장점으로는 하나의 프로세스에서는 여러 스레드가 자원(메모리)를 공유하게 된다.</li>
</ul>
<div class="hint-container info">
<p class="hint-container-title">정보</p>
<p>멀티 프로세스와의 차이점으로는 각각의 프로세스는 자원을 공유할 수 없다.</p>
</div>
<h3>2) 인터럽트의 비활성화(Disabling Interrupts)</h3>
<ul>
<li>커널의 스케쥴링 방식에 따라 CPU 사용을 선점 당할 수 있는지의 여부가 달라진다.</li>
<li>PintOS는 커널 스레드가 언제든지 선점 당할 수 있는 Preempible kernel(선점형 커널)이다.</li>
<li>interrupt를 비활성화 하는 것만으로도 Synchronization(동기화)가 가능
<ul>
<li>스레드 선점은 timer interrupt에 의해 일어나기 때문에 interrupt 자체를 막는다.</li>
</ul>
</li>
<li>이 방법은 외부 인터럽트 핸들러를 동기화 시키기 위해 주로 사용된다.
<ul>
<li>외부 인터럽트는 프로그램 내부에서 발생하는 인터럽트와 다르게 외부에서 발생하는 인터럽트로 sleep이 불가 하다.</li>
<li>따라서 다른 동기화 도구가 사용될 수 없고, 가장 우선적으로 처리되어야 하기 때문에, 외부 인터럽트가 실행 되는 동안은 다른 모든 인터럽트를 비활성화 한다.</li>
</ul>
</li>
<li>&lt;thread/interrupt.h&gt;에 interrupt 들은 활성/비활성 할 수 있는 Type, function들이 있다.</li>
</ul>
<h3>3) 세마포어(Semaphores)</h3>
<ul>
<li>멀티 스레드는 프로세스의 ‘공유자원’을 서로 공유하게 된다.</li>
<li>임계구역(Critical Section) : 각 스레드에서 이 공유자원을 억세스 하는 코드 구역</li>
</ul>
<div class="hint-container info">
<p class="hint-container-title">정보</p>
<p>이때 같은 공유데이터에 여러 스레드가 동시에 접근하면 시간차이로 인한 잘못된 결과로 이어지기 때문에, 하나의 스레드가 임계구역에 들어가 있다면 다른 스레드들은 인계구역에 접근하는 것을 ‘제한’ 해야 한다.</p>
</div>
<ul>
<li>세마포(Semaphores) : 공유자원을 여러 스레드가 동시에 접근 하지 못하도록 하는 도구
<ul>
<li>Nonnegative integer와 두개의 Operators로 이루어짐</li>
<li>Nonnegative integer : 사용 가능한 공유자원의 개수
<ul>
<li>만일 값이 2라면 2개의 스레드가 동시에 접근이 가능하고, 값이 0이면 사용가능한 공유자원이 없다는 것을 의미</li>
</ul>
</li>
<li>Nonnegative integer 조작 방법
<ul>
<li>“Down”(or “P”)
<ul>
<li>스레드 임계구역 입장 → 공유자원 사용 요청 → 사용가능한 공유자원 개수 1개 이상(양수) → 수를 1 감소 시킴 → 임계구역 실행(공유자원 사용)</li>
<li>공유자원 개수 0 이하 → 양수가 될때 까지 임계구역을 실행하지 않고 기다림</li>
</ul>
</li>
<li>“Up”(or “V”)
<ul>
<li>스레드가 임계구역의 실행을 모두 마침 → 공유자원 반납 → 사용 가능한 공유자원의 개수를 1 늘림</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>0으로 초기화 되는 경우 : 스레드 A 가 우선 기다림 → 스레드 B의 작업이 끝나면 A가 실행</li>
<li>1로 초기화 되는 경우 : 스레드 A 가 우선 실행됨 → A의 작업이 끝나면 기다리던 B가 실행</li>
</ul>
<h3>4) Locks</h3>
<ul>
<li>세마포랑 마찬가지로 공유자원을 관리하는 동기화도구 중 하나다.</li>
<li>“Up”대신 “release”, “Down” 대신 “acquire”라는 이름의 Operator로 동작</li>
</ul>
<div class="hint-container info">
<p class="hint-container-title">정보</p>
<p>Lock에는 세마포에는 없는 하나의 제약이 있다! 밑에 설명</p>
</div>
<ul>
<li>Acquire를 호출한 스레드만이 해당 Lock을 release 할 수 있다.</li>
</ul>
<h3>5) Monitors</h3>
<ul>
<li>공유자원, 모니터 락, 조건변수로 이루어 진다.</li>
<li>각각의 스레드들은 서로 Mutual Exclustion(상호배타)가 된다.
<ul>
<li>즉, 공유자원을 하나의 스레드만 사용 할 수 있는 상태가 된다.</li>
</ul>
</li>
<li>좀더 공부가 필요!</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>WEEK09-Pintos_Project2_User Program</title>
      <link>https://www.levih.me/vue-press/dev/SW%EC%82%AC%EA%B4%80%ED%95%99%EA%B5%90%EC%A0%95%EA%B8%80/WEEK09-Pintos_Project2_User%20Program.html</link>
      <guid>https://www.levih.me/vue-press/dev/SW%EC%82%AC%EA%B4%80%ED%95%99%EA%B5%90%EC%A0%95%EA%B8%80/WEEK09-Pintos_Project2_User%20Program.html</guid>
      <source url="https://www.levih.me/vue-press/rss.xml">WEEK09-Pintos_Project2_User Program</source>
      <description>SW사관학교 정글 5기 9주차 회고</description>
      <category>Dev</category>
      <pubDate>Tue, 29 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>SW사관학교 정글 5기 9주차 회고</li>
</ul>
<!-- more -->
<h2>1. User Program 관련 주요 용어 정리</h2>
<div class="hint-container info">
<p class="hint-container-title">정보</p>
<p>용어 정리</p>
</div>
<ol>
<li>
<p>인터럽트</p>
<ul>
<li>사전적 정의 : 끼어들다, 중단시키다.</li>
<li>상세 설명 : <a href="https://raisonde.tistory.com/entry/%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8Interrupt%EC%9D%98-%EA%B0%9C%EB%85%90%EA%B3%BC-%EC%A2%85%EB%A5%98" target="_blank" rel="noopener noreferrer">인터럽트(Interrupt)의 개념과 종류</a></li>
</ul>
</li>
<li>
<p>시스템 콜</p>
<ul>
<li>커널영력의 기능을 사용자 모드가 사용 가능하게 하는 것</li>
<li>즉 프로세스에서 하드웨어를 제어할 수 있게 해주는 것</li>
<li>콜을 부르면 커널 내 정의된 스택에 접근 →인스트럭션 발생!</li>
</ul>
</li>
<li>
<p>사용자 및 커널 모드</p>
</li>
</ol>
<figure><figcaption>Untitled</figcaption></figure>
<ol start="4">
<li>
<p>프로세스</p>
<ul>
<li>실행중에 있는 프로그램</li>
<li>최소 하나의 스레드를 같고 있다. (pintos 에서는 하나의 프로세스는 하나의 스레드만 갖는다.)</li>
<li>하드에 있는 프로그램을 실행 하고 실행을 위해 메모리 할당이 이루어 진다.
<ul>
<li>이때 할당된 메모리 공간으로 바이너리 코드가 올라오면 이순간부터 ‘프로세스’라 한다.</li>
</ul>
</li>
<li><a href="https://blockdmask.tistory.com/22" target="_blank" rel="noopener noreferrer">[운영체제] 프로세스란? (스케줄링, 메모리구조, 상태변화)</a></li>
</ul>
</li>
</ol>
<h2>2. PintOS 흐름도(Process의 생성과 종료)</h2>
<h3>흐름도 그림</h3>
<ul>
<li>kaist-pintos와는 조금 차이가 있다. 아래 코드로 다시 정리</li>
</ul>
<figure><figcaption>Untitled</figcaption></figure>
<h3>흐름 코드 정리</h3>
<ol>
<li>
<p>threads/init.c → main()</p>
<ul>
<li>핀토스의 메인 함수이다.</li>
<li>read_command_line()에서 명령줄을 읽어온다.</li>
<li>run_actions() 에서 커널 명령줄에 지정된 작업을 실행한다. (argv는 명령어 전체를 의미)</li>
</ul>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">	...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">	argv </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> read_command_line</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> //kernel command line을 읽어와서 arguments로 나눈다.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">	argv </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> parse_options</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (argv);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> //command line에서 options을 읽어 온다.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">	</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">	...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">	/* 커널 명령줄에 지정된 작업을 실행합니다. */</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">	run_actions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (argv);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">	/* Finish up. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (power_off_when_done)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">		power_off</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ();</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">	thread_exit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>threads/init.c → run_actions()</p>
<ul>
<li>“run”일 경우 run_task를 실행</li>
</ul>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">run_actions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> **</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">argv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">	/* An action. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> action {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">		char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">name;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">                       /* Action name. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">		int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> argc;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">                         /* # of args, including action name. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">		void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">function) (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> **</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">argv);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">   /* Function to execute action. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">	};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">	/* Table of supported actions. */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> action actions</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">[]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">		{</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"run"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, run_task},</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">	...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>threads/init.c → run_task()</p>
<ul>
<li>process_create_initd() 에서 프로세스 생성을 시작</li>
<li>process_wait() 는 해당 프로세스가 종료될 때 까지 기다린다.</li>
</ul>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">run_task</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> **</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">argv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">task </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> argv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">	printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Executing '</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">':</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, task);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#ifdef</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> USERPROG</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (thread_tests){</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">		run_test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (task);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">	} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">		process_wait</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">process_create_initd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (task));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">	...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>userprog/prosess.c → process_create_initd()</p>
<ul>
<li>process를 생성하면서 thread를 만들어 준다</li>
<li>thread는 해당 파일 이름으로 생성</li>
<li>생성된 Thread는 스캐쥴링 되어 run 또는 wait.</li>
<li>이곳에서 페이지까지 할당 받는다.</li>
</ul>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">tid_t</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">process_create_initd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">file_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) { </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">fn_copy;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">	tid_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> tid;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">	/* Make a copy of FILE_NAME.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">	 * Otherwise there's a race between the caller and load(). */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">	/* FILE_NAME의 복사본을 만듭니다.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">	 그렇지 않으면 호출자와 load() 사이에 경쟁이 있습니다. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">	fn_copy </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> palloc_get_page</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 커널 가상 주소 반환</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (fn_copy </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">		return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> TID_ERROR;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">	strlcpy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (fn_copy, file_name, PGSIZE);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">	/*명령어 전체 중 file_name부분만 잘라서 넣어준다.*/</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">save_ptr;  </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">	strtok_r</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (file_name, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">" "</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">save_ptr);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">	/* Create a new thread to execute FILE_NAME. */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">	/* FILE_NAME을 실행할 새 스레드를 만듭니다. */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">	tid </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> thread_create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (file_name, PRI_DEFAULT, initd, fn_copy);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (tid </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> TID_ERROR)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">		palloc_free_page</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (fn_copy);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">	</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> tid;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>
<li>
<p>생성된 tid 값을 return 하여 process_wait()함수로 보낸다.</p>
<ul>
<li>process_wait()에선 main thread는 모든 자식 스레드가 종료될때 까지 기다리는 상황이 된다.</li>
</ul>
<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">process_wait</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">tid_t</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> child_tid </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">UNUSED</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> thread </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">child </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> get_child</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(child_tid);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">	//넘어온 tid 값과 같은 자식 리스트의 스레드를 가져온다.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (child </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">){</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">							//없다면 리턴 -1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">		return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">	}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">child</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">is_waited</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">){</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">						//아직 기다리라고 한 자식이면 리턴 -1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">		return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">	}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">										//자식이 있고 기다리라고 했던 적이 없다면 </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">		child </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">-&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">is_waited</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">				//자식을 기다리라고 한다. </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">	}	</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">	sema_down</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">child </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">-&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">sema_wait</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">				//자식이 wait 상태인동안 인터럽트 활성화</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> exit_status </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> child </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">-&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">exit_status</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">	list_remove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">child</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">child_list_elem</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">		//자식 제거</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">	sema_up</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">child </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">-&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">sema_free</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">				//free할 수 있도록 인터럽트 해제</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> exit_status;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">			// 종료 상태를 리턴</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>모든 과정이 끝나면 1)번으로 돌아가 power_off () 하게 된다.</li>
</ul>
</li>
</ol>
<h2>3. Process의 생성을 위한 Argument Passing → 인자 전달</h2>
<ul>
<li>
<p>Argument Passing 이유와 목적</p>
<ol>
<li>
<p>Argument Passing 이유</p>
<ul>
<li>예를 들어 <code>/bin/ls -l foo bar</code> 와 같은 명령어가 주어 졌을때 단어를 띄어쓰기별로 쪼개어 스택에 넣어야 한다.
<ul>
<li>그래야 각각의 명령어를 커널에 전달 할 수 있기 때문이다.</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Argument Passing 목적</p>
<ul>
<li>Passing 한 텍스트들은 각각의 스텍의 포인터로 argv의 원소에 저장 하여 전달 해야 한다.</li>
</ul>
</li>
</ol>
</li>
<li>
<p>스택 저장 방법</p>
<ul>
<li>최종적으로는  <code>%rdi</code>,&nbsp;<code>%rsi</code>,&nbsp;<code>%rdx</code>,&nbsp;<code>%rcx</code>,&nbsp;<code>%r8</code>,&nbsp;<code>%r9</code> 시퀀스들을 전달 하기 위해 정수 레지스터를 사용한다.</li>
</ul>
<div class="hint-container info">
<p class="hint-container-title">정보</p>
<p>아래의 표는 스택과 관련 레지스터들이 유저 프로그램이 시작되기 직전에 어떤 상태인지를 보여줍니다.</p>
</div>
<p>스택은 아래 방향으로 커진다는 사실을 알아두세요.</p>
<p>| Address | Name | Data | Type |<br>
|</p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>WEEK10-회고</title>
      <link>https://www.levih.me/vue-press/dev/SW%EC%82%AC%EA%B4%80%ED%95%99%EA%B5%90%EC%A0%95%EA%B8%80/WEEK10-%ED%9A%8C%EA%B3%A0.html</link>
      <guid>https://www.levih.me/vue-press/dev/SW%EC%82%AC%EA%B4%80%ED%95%99%EA%B5%90%EC%A0%95%EA%B8%80/WEEK10-%ED%9A%8C%EA%B3%A0.html</guid>
      <source url="https://www.levih.me/vue-press/rss.xml">WEEK10-회고</source>
      <description>SW사관학교 정글 5기 10주차 회고</description>
      <category>Dev</category>
      <pubDate>Fri, 02 Dec 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>SW사관학교 정글 5기 10주차 회고</li>
</ul>
<!-- more -->
<h2><strong>꼭지 남기기</strong></h2>
<p>말이 좀 이상하게 보일 수 있으나 결론은 회고록을 안 쓴 지 오래되어 정글 기간 동안의 나의 변화점을 기록하려고 한다.</p>
<p>(Notion이라는 정리하기 아주 좋은 플랫폼을 발견하여 그곳에 계속 적으로 정리 중이다.)</p>
<h2><strong>WEEK04까지 했던 알고리즘</strong></h2>
<p>개인적으론 가장 힘든 시간이었다. (솔직히 지금 Pintso 하는 시간보다 힘들었다)</p>
<p>이유는 다음과 같다.</p>
<ul>
<li>기본적인 수학적인 지식을 기초로 필요하여 추가적인 공부</li>
<li>계속된 test에서의 부진</li>
<li>많은 공부를 짧은 시간 안에 해야 했음(이건 지금 생각하면 그렇게 많은 거 같지도 않다)</li>
</ul>
<p>수학을 안 한 지 12년도 더 되었고 그 상태에서 사고하여 문제를 해결해야 한다는 부분이 많이 어려웠던 것 같다.</p>
<p>이 부분을 해결해 보기 위해 여러 방법을 사용했었다. 다음과 같다.</p>
<ul>
<li>
<p>모르는 수학 개념 동영상 강의(이거 덕분에 아직도 유튜브에서 추천 영상으로 수학선생님들이 많이 나온다.)</p>
<ul>
<li>효과는 좋았다. 기본적인 수학적 개념들이 다시 생각나고 적용할 수 있게 되었다.</li>
</ul>
</li>
<li>
<p>집중하는 시간 정하기 (30분 집중, 5분 휴식)</p>
<ul>
<li>이 방법은 지금까지도 좋은 습관으로 남아 있다. 누구에게나 추천해 주고 싶은 방법이다.</li>
<li>지금은 조금씩 그 시간을 늘려서 더 길게 집중하고 집중의 질도 좋아졌다.</li>
</ul>
</li>
</ul>
<p>하지만 알고리즘에서 끝까지 내 발목을 잡는 건 '문제를 파악하는 것' 이였다.</p>
<p>제출자의 의도와 접근 방식을 잡지 못했다. 여러 조언으로 '많이 풀어보자'는 결론이 나왔고 하루 한 문제씩을 못 표로 잡았으나 어느새 1주에 한 번으로 되어 버렸다.</p>
<p>오늘 네이버에서 와주셨고 알고리즘을 강조하시기에 다시 시작해야 한다는 다짐을 하게 되었다.</p>
<p>하루 한 시간.</p>
<p>길지 않은 시간이다. 충분히 할 수 있다.</p>
<h2><strong>WEEK05, C언어의 시작</strong></h2>
<p>처음에는 재밌을 것 같았다</p>
<ul>
<li>알고리즘 안 해도 된다는 생각</li>
<li>새로운 언어를 배운다는 생각</li>
</ul>
<p>그리고 지금 느끼는 점은 아직 재밌다. 중간에 조금 힘든 시기가 있었다. 포인터라는 놈이 나오고 구조체라는 놈이 나오고...</p>
<p>하지만 어떤 강의에서 이렇게 말했다.</p>
<blockquote>
<p>C를 하는 사람들은 포인터에서 자유를 느끼고 나중엔 이것이 어마어마한 권력이라고 느끼게 된다.</p>
</blockquote>
<p>이 말을 듣고 쳐다보기 싫었던 포인터를 다시 생각하고 공부하게 됐다. 지금은 다행히 어느 정도 코드의 흐름이 보이고 포인터도 어느정도 사용할 수 있게 되었다.</p>
<p>잡담은 이것까지 하고 5주 차는 RB-Tree였다.</p>
<p>먼저 난 가장 간단한 링크드 리스트부터 구현해보고 이분 탐색 트리도 구현했다.</p>
<p>위 작업을 미리 구현하면서 포인터에 대한 이해와 C에 대해 많이 배웠고 본격적으로 RB-Tree를 구현했다.</p>
<p>수도 코드를 많이 참고하여 구현하였으나 개인적으로 배운 것이 정말 많았던 주였다. 스스로도 크게 성장했던 시기이다.</p>
<h2><strong>WEEK06, Malloc 구현. 본격적인 하드웨어와 친해지기</strong></h2>
<p>가장 힘들었던 부분은 다음과 같다.</p>
<ul>
<li>너무나 방대한 CS 공부</li>
<li>방대한 것뿐만 아니라 너무 깊음</li>
</ul>
<p>6주 차에서 CS공부를 가장 많이 했다. (물론 지금도 많이 한다. 끝이 없다)</p>
<p>정말 정말 힘들었지만 한편으론 설레는 부분이 있었다.</p>
<p>평생 공부해도 다 알 수 없을 것 같은 느낌이 이 들면서, 내가 죽을 때까지 성장할 수 있겠구나 하는 생각이 들었다.</p>
<p>정글 오기 전부터 내가 원했던 부분이고 다시 한번 정글에 온 것을 잘했다고 생각하게 되었다.</p>
<p>그렇지만 너무 어려운 부분들이 많았다.</p>
<p>그래도 CPU와 메모리의 관계에 대해 깊이 이해할 수 있었다.</p>
<h2><strong>WEEK07, 웹 서버 구축. CS 재밌다!</strong></h2>
<p>이전에 알던 지식들을 어느 정도 적용할 수 있는 주차였다.</p>
<p>더불어 해당 주차를 진행하면서 내가 지금 어떤 레이어에 있는지를 이해하면서 코드를 짜기 시작했다.</p>
<p>개인적으론 이 부분이 가장 큰 성장이라고 생각한다.</p>
<p>난 일을 하던 공부를 하던 내가 지금 어디서 무엇을 하고 있는가가 가장 중요하다고 생각한다.</p>
<p>네트워크 7 계층을 공부하게 되면서 유저/커널/HW의 3 계층도 배웠다. 이 부분에 대한 이해는 PintOS 프로젝트를 하면서도 많이 도움이 되었다.</p>
<p>이때부터 점점 더 공부의 재미(정확히 CS의 재미)를 느끼게 된 것 같다.</p>
<p>그리고 집중도도 확실히 좋아졌다고 느꼈다. 공부하는 습관이 점점 바로 잡혔다. 중요한 주차였다.</p>
<h2><strong>WEEK08~10, PintOS 시작부터 지금까지</strong></h2>
<p>지금까지 Project 1, 2를 완료하고 금주부터 Project 3 시작했다.</p>
<p>정확히는 10.5주를 넘어서고 있다.</p>
<p>유튜브 여유로운 개발자의 강의들이 정말 큰 도움이 되었다. (돈 벌면 구독해서 갚겠습니다!)</p>
<p><a href="https://www.youtube.com/@user-kw8xd4qi8q" target="_blank" rel="noopener noreferrer">유튜브링크</a></p>
<p>처음 과제 파일을 받았을 때는 집에 가고 싶었다.</p>
<p>뭐가 어떻게 돌아가는지 파악하는데만 3일을 넘게 시간이 걸렸던 것 같다. (아직 지금도 완벽히 알지 못한다.)</p>
<p>체력적으로 많이 힘들었지만 그래도 남은 게 너무 많아서 좋았다.</p>
<p>심지어 지금 Project 3을 하는 중인데, 재밌다. 코드 파악하는 부분이나 이론 공부나 하루하루 재밌게 하고 있다.</p>
<p>잘 마무리해보자</p>
<h2><strong>지금까지 느낀 점 정리</strong></h2>
<p>더 열심히 할 수 있겠다는 생각이 아직 있다.</p>
<p>이런 생각이 남는다면 끝나고 분명히 후회한다. 따라서 더 열심히 하고 집중해야 한다.</p>
<p>배워야 할게 많다. 남들보다 늦은 부분들도 있고 같은 것을 배워도 가끔 뒤처지는 것도 인정한다.</p>
<p>그래도 뒤돌아보니 결국은 성장해 있었다는 것을 이 글을 쓰면서 느꼈다.</p>
<p>재밌다.</p>
<p>정글이 끝나고 더 재밌으려면 지금 더 노력해야 한다.</p>
]]></content:encoded>
    </item>
    <item>
      <title>WEEK10~13-Pintos_Project3_Virtual Memory</title>
      <link>https://www.levih.me/vue-press/dev/SW%EC%82%AC%EA%B4%80%ED%95%99%EA%B5%90%EC%A0%95%EA%B8%80/WEEK10~13-Pintos_Project3_Virtual%20Memory.html</link>
      <guid>https://www.levih.me/vue-press/dev/SW%EC%82%AC%EA%B4%80%ED%95%99%EA%B5%90%EC%A0%95%EA%B8%80/WEEK10~13-Pintos_Project3_Virtual%20Memory.html</guid>
      <source url="https://www.levih.me/vue-press/rss.xml">WEEK10~13-Pintos_Project3_Virtual Memory</source>
      <description>SW사관학교 정글 5기 10~13주차 정리</description>
      <category>Dev</category>
      <pubDate>Tue, 06 Dec 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>SW사관학교 정글 5기 10~13주차 정리</li>
</ul>
<!-- more -->
<h2>1. Virtual Memory 관련 모르는 용어 정리</h2>
<ul>
<li>용어 정리
<ul>
<li>
<p>블록디바이스 (Block Device)</p>
<ul>
<li>하드디스크나 CD/DVD 등의 장치</li>
<li>블록이나 섹터 등의 정해진 단위로 반환</li>
<li>I / O 속도가 빠름</li>
<li>다른 종류로 캐릭터 디바이스가 있다.</li>
</ul>
<figure><figcaption>Untitled</figcaption></figure>
</li>
<li>
<p>섹터 (sector)</p>
<ul>
<li>디스크에서 데이터 한 조각의 단위를 말한다.</li>
</ul>
</li>
<li>
<p>스왑 파티션 (SWAP)</p>
<ul>
<li>메모리(RAM)가 초과하였을때 필요</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2>2. 과제 설명서 요약</h2>
<ul>
<li>
<p>Introduction</p>
<ul>
<li>무한한 메모리를 빌드하여 제한을 풀기</li>
<li>프로젝트 2를 이어서 시작</li>
</ul>
</li>
<li>
<p>Background</p>
<ul>
<li>Source Files
<ul>
<li><code>vm</code> 디렉토리에서 작업</li>
<li><code>Makefile</code>은 건들지 말고 바꾸지 말라는 코드는 바꾸지 말것</li>
</ul>
</li>
<li><code>include/vm/vm.h</code>, <code>vm/vm.c</code>
<ul>
<li>가상메모리의 기본적인 인터페이스 제공</li>
<li>헤더파일에서는 가상 메모리 시스템이 지원해야 하는 <code>vm_type</code> 정의
<ul>
<li>VM_UNINIT</li>
<li>VM_ANON</li>
<li>VM_FILE</li>
</ul>
</li>
<li>보조 페이지 테이블 구현</li>
</ul>
</li>
<li><code>include/vm/uninit.h</code>, <code>vm/uninit.c</code>
<ul>
<li>vm_type = <code>VM_UNINIT</code> : 초기화되지 않는 페이지들을 위한 기능 제공</li>
<li>현재 모든 페이지가 초기화 되지 않은 페이지로 설정</li>
<li>이후 <code>anonymous page</code>, <code>file-backed page</code>로 변환</li>
</ul>
</li>
<li><code>include/vm/anon.h</code>, <code>vm/anon.c</code>
<ul>
<li>vm_type = VM_ANON : anonymous page 기능 제공</li>
</ul>
</li>
<li><code>include/vm/inspect.h</code>, <code>vm/inspect.c</code>
<ul>
<li>채점을 위한 메모리 검사기능</li>
<li>수정 XXXXXX</li>
</ul>
</li>
<li>작업할 파일은 대부분 vm 경로와 이전 프로젝트에 소개된 파일들</li>
<li><code>include/devices/block.h</code>, <code>devices/block.c</code>
<ul>
<li>블록 디바이스로의 섹터기반 읽기/쓰기를 제공</li>
<li>이 인터페이스는 블록 디바이스가 스왑 파티션에서 접근 할 때 사용</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Memory Terminology (메모리 용어)</p>
<ul>
<li>
<p>Pages</p>
<ul>
<li>4,096바이트(byte) = 4키비바이트(KiB)</li>
<li>이 길이를 가지는 가상 메모리의 연속된 영역</li>
<li>페이지에 정렬(page-aligned) = <strong>가상주소의 시작부분이 페이지 크기로 나누어 떨어진다.</strong>
<ul>
<li>64bit 가상주소의 마지막 12bit는 페이지 오프셋</li>
</ul>
</li>
<li>상위 bit는 페이지테이블의 인덱스를 표시하기 위해 사용</li>
<li>64bit시스템은 4가지 페이지 테이블 사용</li>
</ul>
<div class="language-html" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">63          48 47            39 38            30 29            21 20         12 11         0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">+</span></span></code></pre>
</div></li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>WEEK13-Pintos_Project3_회고</title>
      <link>https://www.levih.me/vue-press/dev/SW%EC%82%AC%EA%B4%80%ED%95%99%EA%B5%90%EC%A0%95%EA%B8%80/WEEK13-Pintos_Project3_%ED%9A%8C%EA%B3%A0.html</link>
      <guid>https://www.levih.me/vue-press/dev/SW%EC%82%AC%EA%B4%80%ED%95%99%EA%B5%90%EC%A0%95%EA%B8%80/WEEK13-Pintos_Project3_%ED%9A%8C%EA%B3%A0.html</guid>
      <source url="https://www.levih.me/vue-press/rss.xml">WEEK13-Pintos_Project3_회고</source>
      <description>SW사관학교 정글 5기 13주차 회고</description>
      <category>Dev</category>
      <pubDate>Tue, 20 Dec 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>SW사관학교 정글 5기 13주차 회고</li>
</ul>
<!-- more -->
<h2>PintOS의 꽃? Virtual Memory</h2>
<p>이번엔 Virtual Memory를 직접 만들어 메모리 할당을 Layz 하게 해야 했다.</p>
<p>알아야 할 개념이 한두개가 아니었다. 보조 페이지(SPT), 물리 메모리, 디스크, swap in/out, 프레임 등등...</p>
<p>그래도 과제는 끝까지 해내긴 하였으나, 정확히 이해 하였다고는 말하지 못할 듯하다.</p>
<p>힘들었던 점들과 어떻게 극복 하려 했는지에 대해 정리하겠다.</p>
<ol>
<li>
<p>많은 이론에 대한 공부 부담</p>
<ul>
<li>난 공부 속도가 빠른편이 아니다. 그래서 많은 양은 부담이 더 크게 되었다.</li>
<li>파트를 총 5파트로 나눴다. 그리고 그 안에서도 주제별로 나눴다. 그리고 하나씩 보면서 밟아갔다.</li>
<li>특히 CSAPP를 꾸준히 읽었던 것이 아주 도움이 되었다.</li>
</ul>
</li>
<li>
<p>수학적 계산들에 대한 부분</p>
<ul>
<li>가상주소와 스택 포인터, 바이트 단위로의 관리 등 많은 계산식들이 들어간다.</li>
<li>알고리즘때도 느꼈던 부분이었고 남들보다 더 시간을 들여 극복할 수밖에 없었다.</li>
</ul>
</li>
<li>
<p>코드 양에 대한 압박</p>
<ul>
<li>수정해야 할 코드 파일이 8~12개 정도 되었던거 같다. project 1부터 작성해왔던 코드도 다시 확인하고 수정해야 했다.</li>
<li>내가 지금까지 작성했던 코드의 전반적인 흐름도 다시한번 생각해야 했다.</li>
<li>하지만 이 부분은 위 두 사항에 비해서는 큰 문제는 아니였다.</li>
</ul>
</li>
</ol>
<h2>그래서 무엇을 배웠고 남겼나</h2>
<ol>
<li>
<p>인터럽트에 대한 정확한 이해</p>
<ul>
<li>인터럽트는 OS뿐만 아니라 웹, 앱, 심지어 가전제품까지 우리 생활 모든 부분에 적용되는 개념이다.</li>
<li>동시성의 개념도 함께 습득하며, 앞으로 내가 개발자로 성장하는 동안 큰 도움이 될 것 같다.</li>
</ul>
</li>
<li>
<p>CPU와 RAM이 어떻게 일하는지, 컴퓨터가 어떻게 일하는지</p>
<ul>
<li>정말 넓은 개념이라 모든것을 이해했다고는 당연히 말 못 한다.</li>
<li>하지만 이제 큰 그림을 그릴 수 있으며, 내가 컴퓨터에서 어떤 행동을 했을 때 그 명령이 어떻게 작용되어 적용되는지까지 볼 수 있게 되었다.</li>
<li>이부분에 대해서는 개인적으로 정말 흥미롭게 공부했으며, 정글이 끝나고도 좀 더 깊게 공부할 것 같다.</li>
</ul>
</li>
<li>
<p>웹 공부를 위한 튼튼한 발판</p>
<ul>
<li>이부분은 지금 React를 공부하면서 매우 크게 느끼고 있다.</li>
<li>특히 React코드에서도 C에서 사용하는 많은 개념들이 비슷하게 적용되며, 덕분에 생각보다 쉽고 재밌게 배우고 있다.</li>
<li>더불어 웹상에서 데이터를 주고받는 방식들에 대해서도 한층 더 깊은 이해를 하게 되었다.</li>
</ul>
</li>
</ol>
<h2>소감</h2>
<p>좋은 커리큘럼이였다.</p>
<p>어떠한 목표를 이룸에 있어 다양한 방법이 있겠으나, 이전에 나와는 다른 방법으로 목표를 이룬 기분이 들었다.</p>
<p>나는 큰 그림을 먼저 그리고 조금씩 깊게 탐구했던 스타일이었다.</p>
<p>이 방법의 단점은 너무 큰 그림이 주어졌을 때 깊게 들어가다가 지쳐 포기하게 된다는 점이다.</p>
<p>하지만 이번 핀토스 프로젝트를 통해 깊게 탐구하는 경험을 하게 되었고 배우게 된 점들이 정말 많다.</p>
<p>이젠 아무리 큰 그림이라도 포기하지 않고 목표를 달성할 수 있는 자신감이 생겼다.</p>
]]></content:encoded>
    </item>
    <item>
      <title>무엇이 나를 행복하게 만드는가</title>
      <link>https://www.levih.me/vue-press/books/%EB%AC%B4%EC%97%87%EC%9D%B4-%EB%82%98%EB%A5%BC-%ED%96%89%EB%B3%B5%ED%95%98%EA%B2%8C-%EB%A7%8C%EB%93%9C%EB%8A%94%EA%B0%80.html</link>
      <guid>https://www.levih.me/vue-press/books/%EB%AC%B4%EC%97%87%EC%9D%B4-%EB%82%98%EB%A5%BC-%ED%96%89%EB%B3%B5%ED%95%98%EA%B2%8C-%EB%A7%8C%EB%93%9C%EB%8A%94%EA%B0%80.html</guid>
      <source url="https://www.levih.me/vue-press/rss.xml">무엇이 나를 행복하게 만드는가</source>
      <description>나의 인생의 가방에 무엇을 담아서 여행일 떠날 것인가!</description>
      <category>Books</category>
      <pubDate>Mon, 22 Jul 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>나의 인생의 가방에 무엇을 담아서 여행일 떠날 것인가!</li>
</ul>
<!-- more -->
<figure><figcaption>이미지</figcaption></figure>
<div class="hint-container important">
<p class="hint-container-title">중요</p>
<p>무엇이 나를 행복하게 만드는가 - 리처드 라이더, 데이비드 샤피로 지음</p>
</div>
<h2>인생은 가방에 필요한 물건을 넣고 떠나는 여행과 같다</h2>
<p>이책에서 가장 많이 나오는 단어는 가방이다.<br>
인생을 여행에 비유하며, 내가 인생에서 가장 가치하는 것들을 여행가방에 넣는 물건들에 비유하고있다.<br>
인생의 가방은</p>
<ul>
<li>서류가방(일을 위한 가방)</li>
<li>여행가방(사랑을 위한 가방)</li>
<li>가방트렁크(살 곳을 위한 가방)<br>
이렇게 3개로 분리하고, 그 안에 들어가는 물건들을 자신의 가치관을 기준으로 담는다.</li>
</ul>
<h2>가방에 담아야 할 것이 무엇일까?(내기준)</h2>
<p>가방은 한정된 크기를 갖고있다. 과연 나의 서류가방과 여행가방, 가방트렁크에 무엇을 담아야 할까?</p>
<ol>
<li>서류가방(일을 위한 가방)
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 나의 재능이 무엇이고 지금 일에서 그 재능을 발휘 할 수 있나?</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 세상에 도움을 줄 수 있는 나의 재능은 무엇일까?</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> 업무 환경은 좋은가?</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-3" disabled="disabled"><label class="task-list-item-label" for="task-item-3"> 일에서 즐거움을 느끼는가?</label></li>
</ul>
</li>
<li>여행가방(사랑을 위한 가방)
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-4" disabled="disabled"><label class="task-list-item-label" for="task-item-4"> 나와 가장 가까운 사람은 누구인가?</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-5" disabled="disabled"><label class="task-list-item-label" for="task-item-5"> 내가 가장 사랑하는 사람은 누구인가?</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-6" disabled="disabled"><label class="task-list-item-label" for="task-item-6"> 왜 사랑 하는가?</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-7" disabled="disabled"><label class="task-list-item-label" for="task-item-7"> 사랑하는 사람과 무엇을 하고 싶은가?</label></li>
</ul>
</li>
<li>가방트렁크(살 곳을 위한 가방)
<ul class="task-list-container">
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-8" disabled="disabled"><label class="task-list-item-label" for="task-item-8"> 나에게 집은 무엇인가?</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-9" disabled="disabled"><label class="task-list-item-label" for="task-item-9"> 집에 불이나면 무엇을 가장 먼저 챙겨 나오겠는가?</label></li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-10" disabled="disabled"><label class="task-list-item-label" for="task-item-10"> 어디에 살고 싶은가?</label></li>
</ul>
</li>
</ol>
<h2>길을 잃어야 새로운 길을 발견 할 수있다.</h2>
<p>앞에 내용들도 중요하지만 핵심은 이부분 이라고 생각한다.<br>
인생을 여행에 비유했으니 쉽게 이해 할 수 있다. 내가 길을 잃었다는 것은 새로운 길을 찾고 있다는 것이다. 하지만, 나도 그렇고 많은 사람들이 길을 잃는 것 자체를 두려워 하여서 아는 길로만 가려고 한다.<br>
두려워 하면 안된다.</p>
<h2>결론</h2>
<p>내 가방에 넣어야 할 것이 무엇일지 생각해보면,</p>
<ol>
<li>사명</li>
<li>가족</li>
<li>일</li>
</ol>
<p>이며, 이 안에서는</p>
<ol>
<li>고아 및 홀부모 가정 사역</li>
<li>청소년 사역</li>
<li>가족과 친구</li>
<li>사랑하는 사람들</li>
<li>PM 업무</li>
<li>TI 사업</li>
</ol>
<p>정도로 정리 할 수 있을 것같다.<br>
인생에 남길 책은 아니지만 가볍게 읽을만한 책인 것같다.</p>
]]></content:encoded>
    </item>
    <item>
      <title>7가지 코드-총정리</title>
      <link>https://www.levih.me/vue-press/books/7%EA%B0%80%EC%A7%80%EC%BD%94%EB%93%9C/intro.html</link>
      <guid>https://www.levih.me/vue-press/books/7%EA%B0%80%EC%A7%80%EC%BD%94%EB%93%9C/intro.html</guid>
      <source url="https://www.levih.me/vue-press/rss.xml">7가지 코드-총정리</source>
      <description>PM이라면 반드시 읽어야 할 필독서</description>
      <category>Books</category>
      <pubDate>Wed, 04 Oct 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>PM이라면 반드시 읽어야 할 필독서</li>
</ul>
<!-- more -->
<div class="hint-container important">
<p class="hint-container-title">중요</p>
<p>7가지 코드 - 닐 메타, 아디티야 아가쉐, 파스 디트로자 지음</p>
</div>
<figure><figcaption>표지</figcaption></figure>
]]></content:encoded>
    </item>
    <item>
      <title>[용어]CAC와 LTV의 정의 및 관계(7가지코드)</title>
      <link>https://www.levih.me/vue-press/tech-product/pm/CAC%EC%99%80%20LTV%EC%9D%98%20%EC%A0%95%EC%9D%98%20%EB%B0%8F%20%EA%B4%80%EA%B3%84(7%EA%B0%80%EC%A7%80%EC%BD%94%EB%93%9C).html</link>
      <guid>https://www.levih.me/vue-press/tech-product/pm/CAC%EC%99%80%20LTV%EC%9D%98%20%EC%A0%95%EC%9D%98%20%EB%B0%8F%20%EA%B4%80%EA%B3%84(7%EA%B0%80%EC%A7%80%EC%BD%94%EB%93%9C).html</guid>
      <source url="https://www.levih.me/vue-press/rss.xml">[용어]CAC와 LTV의 정의 및 관계(7가지코드)</source>
      <description>7가지 코드를 읽다가 발견한 CAC와 LTV에 대해 공부하자</description>
      <category>Tech Product</category>
      <pubDate>Mon, 10 Jun 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>7가지 코드를 읽다가 발견한 CAC와 LTV에 대해 공부하자</li>
</ul>
<!-- more -->
<h2>CAC와 LTV의 정의</h2>
<ol>
<li>
<p>CAC(고객획득비용)</p>
<ul>
<li>
<p>Customer Acquisition Cost</p>
</li>
<li>
<p>제품이나 서비스를 구매할 신규 고객 1명을 확보하는 데 필요한 비용</p>
</li>
<li>
<p>간단해 보이지만 이 비용 안에는 마케팅비, 영업비 등 많은 사항을 포함시킬 수 있으므로 계산이 어려워짐</p>
</li>
<li>
<p>CAC = 마케팅비 + 영업비 / 신규 고객</p>
</li>
<li>
<p>CAC를 구할 때 분모에는 추가로 급여, 도구 등 다양한 내용이 추가 될 수 있다.</p>
</li>
<li>
<p>분모 또한 무료 고객, 유료고객, 1주일 후 탈퇴한 고객 등 더 다양한 케이스가 있다.</p>
</li>
</ul>
</li>
</ol>
<blockquote>
<p>따라서 공식을 다음과 같이 정리하는게 정확한 공식이 된다.</p>
</blockquote>
<blockquote>
<p><strong>CAC = (X개월동안 지출한 마케팅비 + 영업비 + 도구비용) / (X개월 동안 늘어난 신규 고객 수)</strong></p>
</blockquote>
<ol start="2">
<li>
<p>LTV(고객생애가치)</p>
<ul>
<li>
<p>Lifetime Value</p>
</li>
<li>
<p>CLV라고 불리기도 한다.</p>
</li>
<li>
<p>한 고객이 제품이나 서비스를 이용하는 동안 그 고객을 통해 벌어드릴 것으로 예상하는 금전적 가치의 총액</p>
</li>
<li>
<p>요기에서 중요한건 수익이 아닌 이익(금전적 가치)이다.</p>
</li>
<li>
<p>LTV를 계산 하기 위해 ARPU(사용자당 평균 수익, Average Revenue Per User)를 사용 한다.</p>
</li>
</ul>
</li>
</ol>
<blockquote>
<p>LTV = (연간 ARPU) x (매출총이익률) / 이탈률</p>
</blockquote>
<h2>CAC : LTV 비율에 따른 특징</h2>
<ol>
<li>
<p>CAC : LTV = 1 : 1</p>
<ul>
<li>
<p>해당비율은 손익분기점을 기록 하는 것 처럼 보이나 실제로는 인수 때마다 손실을 볼 가능성이 높다.</p>
</li>
<li>
<p>특히 위에서 처럼 CAC를 마케팅비 + 영업비로만 분모를 잡았다면 당연히 회사는 손해일 수 밖에 없다.</p>
</li>
</ul>
</li>
<li>
<p>CAC : LTV = 1 : 1.25</p>
<ul>
<li>
<p>LTV가 CAC보다 높게 되는 순간 해당 상품은 빠른 조치가 필요하다.</p>
</li>
<li>
<p>고객에게 벌어들이는 가치보다 마케팅 비용이 더 나간다는 말이기 때문이다.</p>
</li>
</ul>
</li>
<li>
<p>CAC : LTV = 3 : 1</p>
<ul>
<li>
<p>실리콘 벨리에서는 해당 비율이 가장 좋은 황금 비율이라는 말이 있다.</p>
</li>
<li>
<p>반드시 유지할 필요가 있음</p>
</li>
</ul>
</li>
<li>
<p>CAC : LTV = 4이상 : 1</p>
<ul>
<li>마케팅 비용을 더 늘려야 합니다. 좋은 기회를 날려버리고 있을 수 있습니다.</li>
</ul>
</li>
</ol>
<h2>느낀점</h2>
<p>현재 제품의 고객과 매출의 상관 관계를 통해 어떤 부분을 발전 시키고 어떤부분을 보완해야 하는지 판단 할 수 있는 중요한 지표 계산법을 알게 되었다.</p>
<p>PM은 마케팅적인 부분까지 공부를 해야 하기에 더 독서 하고 공부 하자</p>
]]></content:encoded>
    </item>
    <item>
      <title>URL을 이해하고 업무효율 증가 및 개인보안 강화하기</title>
      <link>https://www.levih.me/vue-press/tech-product/pm/URL%EC%9D%84%20%EC%9D%B4%ED%95%B4%ED%95%98%EA%B3%A0%20%EC%97%85%EB%AC%B4%ED%9A%A8%EC%9C%A8%20%EC%A6%9D%EA%B0%80%20%EB%B0%8F%20%EA%B0%9C%EC%9D%B8%EB%B3%B4%EC%95%88.html</link>
      <guid>https://www.levih.me/vue-press/tech-product/pm/URL%EC%9D%84%20%EC%9D%B4%ED%95%B4%ED%95%98%EA%B3%A0%20%EC%97%85%EB%AC%B4%ED%9A%A8%EC%9C%A8%20%EC%A6%9D%EA%B0%80%20%EB%B0%8F%20%EA%B0%9C%EC%9D%B8%EB%B3%B4%EC%95%88.html</guid>
      <source url="https://www.levih.me/vue-press/rss.xml">URL을 이해하고 업무효율 증가 및 개인보안 강화하기</source>
      <description>도메인과 URL을 쉽게 이해 하고 이를 활용하여 개인보안 능력 키우기</description>
      <category>Tech Product</category>
      <pubDate>Fri, 05 Jul 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>도메인과 URL을 쉽게 이해 하고 이를 활용하여 개인보안 능력 키우기</li>
</ul>
<!-- more -->
<h2>1️⃣ 작성 목적</h2>
<p>URL을 학습하여 이해하고 이를 바탕으로 업무와 개인(회사)보안에 적용</p>
<h2>2️⃣ URL의 구조</h2>
<figure><figcaption>Untitled</figcaption></figure>
<div class="hint-container tip">
<p class="hint-container-title">팁</p>
<p>📌 Parameters와 Anchor, Port는 중요하지 않고, 나머지 항목의 역할만 확인 하시면 됩니다.</p>
</div>
<ol>
<li>Scheme : URL의 프로토콜(규칙)을 정의합니다. 즉, 어떠한 규칙을 갖고 서버와 통신을 하게 되는지 알 수 있습니다. + 보안성(http<strong>s</strong>) 에 대한 확인도 가능 합니다.</li>
<li>Domain Name : Main 도메인인지 Sub 도메인인지 확인 할 수 있으며, 사이트의 대략적인 카테고리를 알 수 있습니다.</li>
<li>Port : 서버로 접속하는 길이라고 생각하면 쉽습니다. 일반 유저에게는 공개되지 않는 값으로 몰라도 됩니다.</li>
<li>Path to the File : 파일(폴더)의 경로라고 이해 하시면 됩니다. 컴퓨터에 있는 폴더들도 이와 같은 구조를 갖고 있으며, 해당 Path를 통해 현재 페이지가 어떤 페이지인지 유추 할 수 있습니다.</li>
</ol>
<h2>3️⃣ 도메인이란?</h2>
<ul>
<li>도메인은 인터넷에 연결된 컴퓨터의 IP 주소를 사람이 쉽게 기억하고 입력할 수 있도록 만든 인터넷 주소입니다.</li>
<li>숫자로 이루어진 IP 주소 대신, 도메인은 영문, 한글 등의 문자로 구성되어 있어 기억하기 쉽고 입력하기 편리합니다.</li>
<li>지도 좌표 : 집주소 = IP : 도메인</li>
</ul>
<h2>4️⃣ 도메인의 종류</h2>
<div class="hint-container tip">
<p class="hint-container-title">팁</p>
<p>📌 아래와 같이 도메인을 통하여, 사이트의 카테고리를 추측 할 수 있습니다.<br>
<strong>단, 도메인은 사이트 관리자가 자유롭게 만들 수 있기 때문에 100% 신뢰 할 수 없습니다.</strong></p>
</div>
<ul>
<li><strong>.com(상용) / .co(기업):</strong>&nbsp;비즈니스, 개인&nbsp;및&nbsp;모든&nbsp;유형의&nbsp;회사에&nbsp;적합합니다. 가장&nbsp;널리&nbsp;사용되는&nbsp;도메인&nbsp;확장자이며&nbsp;상업적&nbsp;의도의&nbsp;상징입니다.</li>
<li><strong>.net(네트워크):</strong>&nbsp;온라인&nbsp;네트워크를&nbsp;구축하려는&nbsp;모든&nbsp;유형의&nbsp;조직에&nbsp;적합합니다. 이&nbsp;도메인&nbsp;확장자는&nbsp;원래&nbsp;네트워크&nbsp;지향&nbsp;웹사이트를&nbsp;위해&nbsp;의도되었지만&nbsp;지금은&nbsp;다양한&nbsp;회사에서&nbsp;사용됩니다.</li>
<li><strong>.mil(군사):</strong>&nbsp;미국&nbsp;군사기관에서만&nbsp;사용합니다. 이&nbsp;도메인&nbsp;확장자는&nbsp;공식&nbsp;미국&nbsp;군사용으로&nbsp;제한되며&nbsp;대중이&nbsp;사용할&nbsp;수&nbsp;없습니다.</li>
<li><strong>.gov / .go(정부):</strong> 주로 정부&nbsp;기관, 정부&nbsp;관계자&nbsp;및&nbsp;웹사이트에&nbsp;권장됩니다. 검증된&nbsp;정부&nbsp;기관에서만&nbsp;사용할&nbsp;수&nbsp;있는&nbsp;신뢰할&nbsp;수&nbsp;있는&nbsp;도메인&nbsp;확장자입니다.</li>
<li><strong>.edu(교육):</strong> 이&nbsp;도메인&nbsp;확장자는&nbsp;공인된 교육&nbsp;기관을&nbsp;위한&nbsp;것으로, 학교, 대학&nbsp;및&nbsp;교육&nbsp;기관에&nbsp;적합합니다.</li>
<li><strong>.org / .or(조직):</strong>&nbsp;처음에는&nbsp;비영리&nbsp;조직을&nbsp;위해&nbsp;지정되었지만&nbsp;지금은&nbsp;비정부&nbsp;조직과&nbsp;커뮤니티&nbsp;프로젝트를&nbsp;포함한&nbsp;다양한&nbsp;그룹에서&nbsp;널리&nbsp;사용됩니다.</li>
</ul>
<h2>5️⃣&nbsp;서브도메인이란</h2>
<p><a href="https://map.naver.com/" target="_blank" rel="noopener noreferrer">map.naver.com</a>는 네이버의 서브도메인입니다.</p>
<div class="hint-container tip">
<p class="hint-container-title">팁</p>
<p>📌 즉, 서브도메인 이란, 도메인 앞에 . 을 붙혀 새로운 만든 도메인 입니다.<br>
<strong>중요한 점은, 서브도메인은 무조건 메인도메인을 소유한 사람만 만들 수 있습니다.</strong></p>
</div>
<p>예를 들어 <a href="http://naver.daet.com" target="_blank" rel="noopener noreferrer">naver.bad.com</a> 이라는 도메인이 있다고 가정하겠습니다.</p>
<p>위 도메인은 naver의 도메인 일까요?</p>
<p>정답은 <strong>아닙니다.</strong></p>
<p>해당 도메인은 <a href="http://bad.com" target="_blank" rel="noopener noreferrer">bad.com</a> 이라는 도메인 소유자가 만든 서브도메인 입니다.</p>
<p>위와같은 방식은 스팸메일에서 많이 볼 수 있습니다. 해당 예시는 하기 6번에서 상세하게 다루겠습니다.</p>
<h2>6️⃣&nbsp;URL을 업무, 개인보안에 활용하는 방법</h2>
<ol>
<li>
<p>가짜도메인(서브도메인)으로 발송한 스팸메일 구분하기<br>
<a href="mailto:apple@apple.iphone.com" target="_blank" rel="noopener noreferrer">apple@apple.iphone.com</a> 메일주소로 “[공식]아이폰 초특가 할인 행사” 라는 메일 왔다고 가정 하겠습니다.</p>
<ul>
<li>이메일을 보내기 위해선 SMTP 서버를 세팅해야 하는데, 추가적인 개념이 필요하니 다음 기회에 설명 하겠습니다.</li>
<li>간단하게, 이메일 주소의 @를 기준으로 앞은 사용자가 마음대로 조작 할 수 있으며, 뒤는 도메인을 소유 하고 있어야 세팅이 가능 합니다.</li>
</ul>
</li>
</ol>
<div class="hint-container tip">
<p class="hint-container-title">팁</p>
<p>📌 즉, <a href="mailto:apple@apple.iphone.com" target="_blank" rel="noopener noreferrer">apple@apple.iphone.com</a> 메일은 Apple에서 보낸 메일이 아닌 <a href="http://iphone.com" target="_blank" rel="noopener noreferrer">iphone.com</a> 도메인을 소유한 사람이 보냈다는 말이 됩니다.</p>
</div>
<p>제가 최근에 회사메일로 받은 이메일 입니다. (하기 이미지)</p>
<ul>
<li>
<p>CJ대한통운에서 보낸 메일이지만 보낸사람 주소를 보면 <strong>@autotronic.co.id</strong> 인것을 볼 수 있습니다.</p>
</li>
<li>
<p>제가 <a href="http://autotronic.co.id/" target="_blank" rel="noopener noreferrer">autotronic.co.id</a> 사이트로 접속 해보니, IoT 기기대여 업체라고 소개를 하고 있습니다.</p>
</li>
<li>
<p>예, 위장 사이트 입니다. 즉, 하기 메일은 전형적인 스팸 메일이며, 첨부파일을 다운로드하면 바이러스가 컴퓨터에 깔리게 됩니다.<br>
</p>
</li>
<li>
<p><strong>위와같은 메일들은 절대 열어보면 안되며, 메일에 있는 이미지, 링크, 첨부파일을 클릭하면 바로 해킹이 됩니다. 주의 하세요!</strong></p>
</li>
</ul>
<ol start="2">
<li>도메인 종류로 사이트 빠르게 파악
<ul>
<li>고등학교 과정에 있는 내용으로 간단하게 정리합니다.</li>
<li><a href="#4%EF%B8%8F%E2%83%A3-%EB%8F%84%EB%A9%94%EC%9D%B8%EC%9D%98-%EC%A2%85%EB%A5%98">4️⃣ 도메인의 종류</a> 부분을 참고 하셔서 내가 방문한 사이트의 카테고리를 파악 하고 구분 할 수 있습니다.</li>
</ul>
</li>
<li>서브도메인을 이용한 악성 사이트 판별하기
<ul>
<li>“청년도약계좌 조건 확인”으로 구글 검색을 하고 제일 상단에 있는 <a href="https://ylaccount.kinf.or.kr/main" target="_blank" rel="noopener noreferrer">ylaccount.kinf.or.kr</a> 사이트에 접속 했다고 가정 하겠습니다.</li>
<li>아무런 의심 없이 계좌 개설 조건을 확인 하기 위해 개인정보를 입력하면, <strong>해커에게 개인정보를 제공</strong>하게 됩니다.</li>
</ul>
</li>
</ol>
<div class="hint-container tip">
<p class="hint-container-title">팁</p>
<p>📌 위와같은 도메인이 있을 경우 공신력을 파악하기 위해 메인도메인(<a href="http://kinf.or.kr" target="_blank" rel="noopener noreferrer">kinf.or.kr</a>)을 따로 검색 해 본 후 해당 사이트의 공신력을 검증 하는 것을 제안 드립니다.</p>
</div>
<h2>결론</h2>
<ol>
<li>웍스, 네이버, 구글에서 스팸으로 분류한 이메일은 이유없이 분류하지 않습니다. 이와같은 메일들은 절대 열어 보시면 안됩니다.</li>
<li>URL(도메인)의 구조와 역할을 이정도만 이해하여도, 해커 머리위에 있을 수 있습니다. 메신저나 메일로 받은 링크, 첨부파일은 반드시 미리 점검해보는 습관이 필요합니다.</li>
<li>QR코드도 URL과 같습니다. 길거리에 돌아다니는 QR코드를 찍는 것만으로 해커의 타겟이 될 수 있습니다.</li>
<li>도메인을 확인하면 사이트의 정보를 미리 파악 할 수 있고, 리서치가 많은 업무에 활용하면 큰 도움이 됩니다.</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>[용어] 검색 엔진 최적화(SEO) 정의와 적용 방법</title>
      <link>https://www.levih.me/vue-press/tech-product/pm/%EA%B2%80%EC%83%89%20%EC%97%94%EC%A7%84%20%EC%B5%9C%EC%A0%81%ED%99%94(SEO)%20%EC%A0%95%EC%9D%98%EC%99%80%20%EC%A0%81%EC%9A%A9%20%EB%B0%A9%EB%B2%95.html</link>
      <guid>https://www.levih.me/vue-press/tech-product/pm/%EA%B2%80%EC%83%89%20%EC%97%94%EC%A7%84%20%EC%B5%9C%EC%A0%81%ED%99%94(SEO)%20%EC%A0%95%EC%9D%98%EC%99%80%20%EC%A0%81%EC%9A%A9%20%EB%B0%A9%EB%B2%95.html</guid>
      <source url="https://www.levih.me/vue-press/rss.xml">[용어] 검색 엔진 최적화(SEO) 정의와 적용 방법</source>
      <description>검색 엔진 최적화 정의와 적용 방법에 대해 알아보자</description>
      <category>Tech Product</category>
      <pubDate>Tue, 11 Jun 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>검색 엔진 최적화 정의와 적용 방법에 대해 알아보자</li>
</ul>
<!-- more -->
<h2><strong>용어 정의</strong></h2>
<p><strong>검색 엔진 최적화(Search Engine Optimazation, SEO)</strong></p>
<ul>
<li>검색 엔진으로 부터 웹사이트나 웹페이지에 대한 웹사이트 트래픽의 품질과 양을 개선하는 과정</li>
</ul>
<p><strong>검색 엔진</strong></p>
<ul>
<li>웹 사이트를 검색하기 위한 프로그램</li>
<li>FTP 서버나 웹사이트의 파일 검색 결과를 포함 (React로 만든 홈페이지가 검색앤진에 노출이 잘 안되는 이유인듯?)</li>
<li>로봇(또는 봇)이라고 불리는 특별한 프로그램을 이용해 웹사이트들에 정보를 자동 수집</li>
</ul>
<p><strong>크롤링</strong></p>
<ul>
<li>인터넷 상에 많은 웹사이트를 URL 단위로 긁어서 구글 검색 엔진의 데이터 베이스로 모으는 과정</li>
</ul>
<p><strong>엔덱싱(색인)</strong></p>
<ul>
<li>웹페이지에 담긴 정보와 콘텐츠를 파악하여 데이터를 저장 하는 과정</li>
</ul>
<p><strong>랭킹</strong></p>
<ul>
<li>색인된 웹페이지의 데이터 및 해당 페이지가 생성된 웹사이트의 SEO 점수를 고려하여, 검색결과에서 몇번째에 표기할 것인지 그 순서를 정하는 작업</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>삽질 그만하고 oopy.io 사용하기</title>
      <link>https://www.levih.me/vue-press/tech-product/saas/%EC%82%BD%EC%A7%88%20%EA%B7%B8%EB%A7%8C%ED%95%98%EA%B3%A0%20oopy.io%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0.html</link>
      <guid>https://www.levih.me/vue-press/tech-product/saas/%EC%82%BD%EC%A7%88%20%EA%B7%B8%EB%A7%8C%ED%95%98%EA%B3%A0%20oopy.io%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0.html</guid>
      <source url="https://www.levih.me/vue-press/rss.xml">삽질 그만하고 oopy.io 사용하기</source>
      <description>길었던 그동안의 삽질을 뒤로하고 oopy에 돈을 써보자</description>
      <category>Tech Product</category>
      <pubDate>Mon, 29 Jan 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li>길었던 그동안의 삽질을 뒤로하고 oopy에 돈을 써보자</li>
</ul>
<!-- more -->
<h2>개요</h2>
<h3>Next.js로 notion cms 블로그 만들기 포기한 이유</h3>
<p>우선 하기 북마크는 내가 Notion 을 CMS로 사용하는 블로그를 만들기 위해 무엇을 했는지 정리가 되어있다.</p>
<p><a href="https://www.kyu91.me/e6eedb9f-b521-434e-9917-eca30c1f03a3" target="_blank" rel="noopener noreferrer">Notion을 CMS로 사용하는 블로그-총정리</a></p>
<p><code>문제점</code>이 하나 있었는데, 해당 Github 소스는 동적으로 sitemap을 만들고 이전 sitemap과 비교하여 새로 생긴 것이 있다면, 웹에 로드해주는 방식을 하고 있다.</p>
<div class="hint-container tip">
<p class="hint-container-title">팁</p>
<p>즉, 페이지가 많아지면 많아질 수록 불러와야 하는 sitemap은 많아지고 로드하는데 시간이 오래 걸린다.</p>
</div>
<p>이점을 해결하기 위해 sitemap을 동적으로 만들어주는 코드를 최적화 하는 작업도 진행 했지만 실패했다. 너무 하위 페이지들이 많았기 때문이다.</p>
<p>그렇다고 sitemap을 안쓰면 내가 새로 작성한 노션의 글이 업로드가 되지 않았다.</p>
<p>해당 문제를 결국 해결을 하지 못하고 난 돈을 쓰기로 했다.</p>
<h2>후보군</h2>
<h3>1. Vercel Pro 사용</h3>
<p><a href="https://github.com/transitive-bullshit/nextjs-notion-starter-kit" target="_blank" rel="noopener noreferrer">nextjs-notion-starter-kit</a>의 Issues 에서도 나와 동일한 문제를 호소하는 사람들이 있었고 그들은 해결방법으로 Vercel Pro를 사용 하는 방법으로 해결했다고 했다. (얼탱이 없음)</p>
<p>해당 비용은 월 20$… 바로 포기했다.</p>
<h3><a class="header-anchor" href="#_2-super-so"><span>2. </span></a><a href="http://super.so" target="_blank" rel="noopener noreferrer">super.so</a></h3>
<p><a href="https://super.so/" target="_blank" rel="noopener noreferrer">Super — Create Websites with Notion</a></p>
<p>해외의 oopy라고 생각하면 쉽다.</p>
<p>무료로도 사용이 가능하다! 하지만 커스텀 도메인을 사용하기 위해선 유로 플랜을 사용해야 하고 그 가격은 다음과 같다. 월 16$ → 포기</p>
<figure><figcaption>image</figcaption></figure>
<h3><a class="header-anchor" href="#_3-oopy-io"><span>3. </span></a><a href="http://oopy.io" target="_blank" rel="noopener noreferrer">oopy.io</a></h3>
<p><a href="https://www.oopy.io/" target="_blank" rel="noopener noreferrer">1분 만에 만드는 노션 웹사이트, 우피!</a></p>
<p>무료체험 기간이 있긴 하지만 기본으로 유료이다.</p>
<p>하지만 기본 플랜이 매우 저렴하고 다른 우피 사용자 도메인을 입력하면 1개월 50% 할인도 해준다.</p>
<p><a href="https://www.oopy.io/ko/pricing" target="_blank" rel="noopener noreferrer">가격 안내</a></p>
<ul>
<li>플랜별 가격
<ul>
<li>베이직 플랜: 5,900원</li>
<li>프로 플랜: 9,900원</li>
</ul>
</li>
</ul>
<p>베이직과 프로의 차이점은 GNB 메뉴를 구성 할 수 있는 점과 페이지별 유저 트래킹을 지원해주는 점 인 것으로 확인 했다. (Pageview referrer의 정확한 기능은 파악하지 못하여서 확인 필요!)</p>
<p>기본 플랜에서도 커스텀 도메인을 사용 할 수 있으므로 oopy로 선택 했다.</p>
<h2>지금까지 후기</h2>
<h3>장점</h3>
<ol>
<li>
<p>자잘한 오류가 없다</p>
<p>생각보다 자잘한 오류가 없었고, 홈페이지가 조금 느리긴 하지만 안정적으로 돌아가는게 마음에 들었다.</p>
</li>
<li>
<p>HTML / CSS 커스텀</p>
<p>베이직 플랜에서 된다는게 대박이라고 생각한다. HTML 블록을 노션에 넣어 커스텀 할 수 있고, 자체 에디터에서 넣을 수 도 있다.</p>
</li>
<li>
<p>베이직에서 지원되는 너무 많은 편의 기능</p>
<p>너무 찬양하는 것 같긴 한데, 베이직만 해도 oopy의 99%기능을 모두 활용 할 수 있다고 말할 수 있다.</p>
<p>특히 개인적으로 “이걸 베이직에서?”하는 기능을 고른다면,</p>
<ul>
<li>커스텀 도메인 + 리다이랙트 주소 설정</li>
<li>CTA 버튼 생성 + 트레킹</li>
<li>노션 데이터 베이스 뷰어 설정</li>
<li><code>head</code>, <code>body</code> 커스텀</li>
<li>편리한 플러그인 설정</li>
<li>그외 등등</li>
</ul>
</li>
<li>
<p>싸다</p>
</li>
</ol>
<h3>단점</h3>
<ul>
<li>느린편
<ul>
<li>방문했던 페이지는 캐싱하여 재방문 시 금방 로드 되지만 처음 방문하는 페이지는 많이 느리다고 체감이 되었다.</li>
</ul>
</li>
<li>sitemap.xml 자동 생성 안됨
<ul>
<li>이부분이 가장 큰 단점으로 왔다.</li>
<li>물론 <code>클린URL</code> 이라는 기능을 사용하며, 내 노션 페이지를 등록 해두면 해당 페이지가 sitemap으로 등록이 되었다.
<ul>
<li>
<p>등록한 클린 URL 목록</p>
<figure><figcaption>Untitled</figcaption></figure>
</li>
<li>
<p>sitemap.xml</p>
<figure><figcaption>Untitled</figcaption></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2>결론</h2>
<p>계속 사용 할 것 같다.</p>
<div class="hint-container tip">
<p class="hint-container-title">팁</p>
<p>개발(코딩)을 모르더라도 사용 할 수 있고, 개발에 대한 지식이 조금이라도 있다면, 몇배 더 잘 사용 할 수 있는 플랫폼이다.</p>
</div>
<p>1인 개발자로 시작한 플랫폼이라고 하는데, 정말 존경 스럽다.</p>
<p>혹시나 인터뷰할 일이 생긴다면 어떤식으로 그렇게 빠르게 노션 페이지를 불러 올 수 있는지 물어보고 싶다. 원리가 궁금하다.</p>
<p>oopy 사장님 저 열심히 썼는데, 쿠폰 하나 주세요.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>